package org.fao.geonet.repository;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Tuple;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Root;

import org.fao.geonet.domain.ISODate;
import org.fao.geonet.domain.MetadataDataInfo_;
import org.fao.geonet.domain.MetadataDraft;
import org.fao.geonet.domain.MetadataDraft_;
import org.fao.geonet.domain.MetadataSourceInfo;
import org.fao.geonet.domain.Pair;
import org.fao.geonet.repository.reports.MetadataReportsQueries;
import org.fao.geonet.repository.statistic.MetadataStatisticsQueries;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;

import com.google.common.collect.Maps;

/**
 * Implementation for all {@link MetadataDraft} queries that cannot be
 * automatically generated by Spring-data.
 *
 * @author Jesse
 */
public class MetadataDraftRepositoryImpl
        implements MetadataDraftRepositoryCustom {

    @PersistenceContext
    EntityManager _entityManager;

    @Override
    public MetadataStatisticsQueries getMetadataStatistics() {
        return new MetadataStatisticsQueries(_entityManager);
    }

    @Override
    public MetadataReportsQueries getMetadataReports() {
        return new MetadataReportsQueries(_entityManager);
    }

    @Override
    public MetadataDraft findOne(String id) {
        try {
            return _entityManager.find(MetadataDraft.class,
                    Integer.parseInt(id));
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException(
                    "id parameter of findByIdString must be parsable to an integer.  It was '"
                            + id + "'");
        }
    }

    @Override
    public @Nonnull Page<Pair<Integer, ISODate>> findAllIdsAndChangeDates(
            @Nullable Pageable pageable) {
        CriteriaBuilder cb = _entityManager.getCriteriaBuilder();
        CriteriaQuery<Tuple> cbQuery = cb.createQuery(Tuple.class);
        Root<MetadataDraft> root = cbQuery.from(MetadataDraft.class);

        cbQuery.multiselect(cb.count(root));
        Long total = (Long) _entityManager.createQuery(cbQuery)
                .getSingleResult().get(0);
        cbQuery.multiselect(root.get(MetadataDraft_.id),
                root.get(MetadataDraft_.dataInfo)
                        .get(MetadataDataInfo_.changeDate));

        if (pageable != null && pageable.getSort() != null) {
            final Sort sort = pageable.getSort();
            List<Order> orders = SortUtils.sortToJpaOrders(cb, sort, root);

            cbQuery.orderBy(orders);
        }

        TypedQuery<Tuple> query = _entityManager.createQuery(cbQuery);
        if (pageable != null) {
            query.setFirstResult(pageable.getOffset());
            query.setMaxResults(pageable.getPageSize());
        }

        ArrayList<Pair<Integer, ISODate>> finalResults = new ArrayList<Pair<Integer, ISODate>>();
        for (Tuple tuple : query.getResultList()) {
            final Integer mdId = (Integer) tuple.get(0);
            final ISODate changeDate = (ISODate) tuple.get(1);
            finalResults.add(Pair.read(mdId, changeDate));
        }
        return new PageImpl<Pair<Integer, ISODate>>(finalResults, pageable,
                total);
    }

    @Nonnull
    @Override
    public List<Integer> findAllIdsBy(
            @Nonnull Specification<MetadataDraft> spec) {
        CriteriaBuilder cb = _entityManager.getCriteriaBuilder();
        CriteriaQuery<Integer> cbQuery = cb.createQuery(Integer.class);
        Root<MetadataDraft> root = cbQuery.from(MetadataDraft.class);
        cbQuery.select(root.get(MetadataDraft_.id));

        cbQuery.where(spec.toPredicate(root, cbQuery, cb));
        return _entityManager.createQuery(cbQuery).getResultList();
    }

    @Override
    public MetadataDraft findOneOldestByChangeDate() {
        final CriteriaBuilder cb = _entityManager.getCriteriaBuilder();
        final CriteriaQuery<MetadataDraft> query = cb
                .createQuery(MetadataDraft.class);
        final Root<MetadataDraft> metadataRoot = query
                .from(MetadataDraft.class);
        final Path<ISODate> changeDate = metadataRoot
                .get(MetadataDraft_.dataInfo).get(MetadataDataInfo_.changeDate);
        query.orderBy(cb.asc(changeDate));
        return _entityManager.createQuery(query).setMaxResults(1)
                .getSingleResult();
    }

    @Override
    public Map<Integer, MetadataSourceInfo> findAllSourceInfo(
            Specification<MetadataDraft> spec) {
        CriteriaBuilder cb = _entityManager.getCriteriaBuilder();
        CriteriaQuery<Object[]> cbQuery = cb.createQuery(Object[].class);
        Root<MetadataDraft> root = cbQuery.from(MetadataDraft.class);
        cbQuery.select(cb.array(root.get(MetadataDraft_.id),
                root.get(MetadataDraft_.sourceInfo)));

        cbQuery.where(spec.toPredicate(root, cbQuery, cb));
        Map<Integer, MetadataSourceInfo> results = Maps.newHashMap();
        final List<Object[]> resultList = _entityManager.createQuery(cbQuery)
                .getResultList();
        for (Object[] objects : resultList) {
            final Integer metadataId = (Integer) objects[0];
            final MetadataSourceInfo sourceInfo = (MetadataSourceInfo) objects[1];
            results.put(metadataId, sourceInfo);
        }

        return results;
    }

}
