/*
 * Copyright (C) 2001-2016 Food and Agriculture Organization of the
 * United Nations (FAO-UN), United Nations World Food Programme (WFP)
 * and United Nations Environment Programme (UNEP)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 *
 * Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
 * Rome - Italy. email: geonetwork@osgeo.org
 */

package org.fao.geonet.repository.specification;

import org.fao.geonet.domain.ISODate;
import org.fao.geonet.domain.statistic.SearchRequest;
import org.fao.geonet.domain.statistic.SearchRequest_;
import org.fao.geonet.repository.AbstractSpringDataTest;
import org.fao.geonet.repository.statistic.SearchRequestRepository;
import org.fao.geonet.repository.statistic.SearchRequestRepositoryTest;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static org.fao.geonet.repository.specification.SearchRequestSpecs.*;
import static org.junit.Assert.assertEquals;

/**
 * Tests for {@link SearchRequestSpecs}
 * User: Jesse
 * Date: 10/2/13
 * Time: 7:50 AM
 */
public class SearchRequestSpecsTest extends AbstractSpringDataTest {

    @Autowired
    SearchRequestRepository _requestRepo;

    @Test
    public void testIsMoreRecentThanOrEqualTo() throws Exception {
        SearchRequest request1 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request1.setRequestDate(new ISODate("1980-06-12T11:34:00"));
        request1 = _requestRepo.save(request1);

        SearchRequest request2 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request2.setRequestDate(new ISODate("1980-06-12T11:37:00"));
        request2 = _requestRepo.save(request2);

        SearchRequest request3 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request3.setRequestDate(new ISODate("1981-06-12T11:34:00"));
        request3 = _requestRepo.save(request3);

        assertEquals(2, _requestRepo.count(isMoreRecentThanOrEqualTo(request2.getRequestDate())));
        assertEquals(1, _requestRepo.count(isMoreRecentThanOrEqualTo(request3.getRequestDate())));
        assertEquals(3, _requestRepo.count(isMoreRecentThanOrEqualTo(request1.getRequestDate())));
        final Sort sort = new Sort(Sort.Direction.DESC, SearchRequest_.requestDate.getName());
        final List<SearchRequest> all = _requestRepo.findAll(isMoreRecentThanOrEqualTo(request2.getRequestDate()), sort);

        assertEquals(2, all.size());
        assertEquals(request3.getId(), all.get(0).getId());
        assertEquals(request2.getId(), all.get(1).getId());
    }

    @Test
    public void testIsOlderThanOrEqualTo() throws Exception {
        SearchRequest request1 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request1.setRequestDate(new ISODate("1980-06-12T11:34:00"));
        request1 = _requestRepo.save(request1);

        SearchRequest request2 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request2.setRequestDate(new ISODate("1980-06-12T11:37:00"));
        request2 = _requestRepo.save(request2);

        SearchRequest request3 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request3.setRequestDate(new ISODate("1981-06-12T11:34:00"));
        request3 = _requestRepo.save(request3);

        assertEquals(2, _requestRepo.count(isOlderThanOrEqualTo(request2.getRequestDate())));
        assertEquals(3, _requestRepo.count(isOlderThanOrEqualTo(request3.getRequestDate())));
        assertEquals(1, _requestRepo.count(isOlderThanOrEqualTo(request1.getRequestDate())));

        final Sort sort = new Sort(Sort.Direction.DESC, SearchRequest_.requestDate.getName());
        final List<SearchRequest> all = _requestRepo.findAll(isOlderThanOrEqualTo(request2.getRequestDate()), sort);

        assertEquals(2, all.size());
        assertEquals(request2.getId(), all.get(0).getId());
        assertEquals(request1.getId(), all.get(1).getId());
    }

    @Test
    public void testIsAutogenerated() throws Exception {
        SearchRequest request1 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request1.setAutogenerated(false);
        request1 = _requestRepo.save(request1);

        SearchRequest request2 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request2.setAutogenerated(true);
        request2 = _requestRepo.save(request2);

        List<SearchRequest> found = _requestRepo.findAll(isAutogenerated(true));
        assertEquals(1, found.size());
        assertEquals(request2.getId(), found.get(0).getId());

        found = _requestRepo.findAll(isAutogenerated(false));
        assertEquals(1, found.size());
        assertEquals(request1.getId(), found.get(0).getId());
    }

    @Test
    public void testHasService() throws Exception {
        SearchRequest request1 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request1 = _requestRepo.save(request1);

        SearchRequest request2 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request2 = _requestRepo.save(request2);

        List<SearchRequest> found = _requestRepo.findAll(hasService(request2.getService()));
        assertEquals(1, found.size());
        assertEquals(request2.getId(), found.get(0).getId());

        found = _requestRepo.findAll(hasService(request1.getService()));
        assertEquals(1, found.size());
        assertEquals(request1.getId(), found.get(0).getId());
    }

    @Test
    public void testHasHits() throws Exception {
        SearchRequest request1 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request1 = _requestRepo.save(request1);

        SearchRequest request2 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request2 = _requestRepo.save(request2);

        List<SearchRequest> found = _requestRepo.findAll(SearchRequestSpecs.hasHits(request2.getHits()));
        assertEquals(1, found.size());
        assertEquals(request2.getId(), found.get(0).getId());

        found = _requestRepo.findAll(SearchRequestSpecs.hasHits(request1.getHits()));
        assertEquals(1, found.size());
        assertEquals(request1.getId(), found.get(0).getId());
    }

    @Test
    public void testIsSimple() throws Exception {
        SearchRequest request1 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request1.setSimple(false);
        request1 = _requestRepo.save(request1);

        SearchRequest request2 = SearchRequestRepositoryTest.newSearchRequest(_inc);
        request2.setSimple(true);
        request2 = _requestRepo.save(request2);

        List<SearchRequest> found = _requestRepo.findAll(isSimple(true));
        assertEquals(1, found.size());
        assertEquals(request2.getId(), found.get(0).getId());

        found = _requestRepo.findAll(isSimple(false));
        assertEquals(1, found.size());
        assertEquals(request1.getId(), found.get(0).getId());
    }
}
