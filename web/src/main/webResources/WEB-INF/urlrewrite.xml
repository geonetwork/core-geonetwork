<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.2//EN"
  "http://tuckey.org/res/dtds/urlrewrite3.2.dtd">
<!--
    Configuration file for UrlRewriteFilter http://tuckey.org/urlrewrite/

    Used to maintain backwards compatibility for old GeoNetwork URLs that use a 2-letter language code.

    Permanent redirects are used (HTTP status 301). This signals that the redirect is permanent and people might update their bookmarks, and this changes
    the URL in the browser's address bar to the target URL.

    To return HTTP 200 and keep the old URL as is in the browser, change the rules below like this:

    <rule>
    <from>^(.*)/es/(.*)$</from>
    <to last="true">$1/spa/$2</to>
    </rule>

-->
<urlrewrite use-query-string="true" use-context="false">
  <rule>
    <from>^/index/(.*)$</from>
    <to type="proxy" qsappend="true">${es.url}/$1?</to>
  </rule>

  <!-- Rule to redirect URL to resources from RDF output -->
  <rule>
    <note>In the catalog, a resource is equivalent to one record.
      So redirect to metadata formatter.</note>
    <from>^(.*)/resources/resources/(.*)$</from>
    <to type="forward">$1/api/records/$2</to>
  </rule>
  <rule>
    <note>In the catalog, a dataset is equivalent to one record.
    So redirect to metadata formatter.</note>
    <from>^(.*)/resources/datasets/(.*)$</from>
    <to type="forward">$1/search?_uuid_OR_identifier=$2</to>
  </rule>
  <rule>
    <note>Catalog information page. List all records for the catalog.
      Redirect to search page.
    </note>
    <from>^(.*)/resources/catalogs/(.*)$</from>
    <to type="forward">$1/search?_source=$2</to>
  </rule>
  <rule>
    <note>Organization information page.</note>
    <from>^(.*)/resources/organizations/(.*)$</from>
    <to type="forward">$1/search?orgName=$2</to>
  </rule>
  <rule>
    <note>Tag information page.</note>
    <from>^(.*)/resources/registries/vocabularies/.*/concepts/(.*)$</from>
    <to type="forward">$1/search?keyword=$2</to>
  </rule>
  <rule>
    <note>Vocabulary information page.</note>
    <from>^(.*)/resources/registries/vocabularies/(.*)$</from>
    <to type="forward">$1/search?thesaurusName=$2</to>
  </rule>
  <rule>
    <note>Organization information page. List all records for an organization.
      Redirect to search page with organization filter.
    </note>
    <from>^(.*)/resources/persons/(.*)$</from>
    <to type="forward">$1/search?responsiblePartyEmail=$2</to>
  </rule>
  <rule>
    <note>
      Redirect catalog resources scheme to the underlying API.
      This was introduce to resolve RDF resources. Usually, it is
      recommended to set a resource identifier prefix in the settings
      and set a reverse proxy to properly resolve resources
      described in the catalog.

      By default, resource identifier prefix is set to
      'http://localhost:8080/geonetwork/srv' and a such
      'http://localhost:8080/geonetwork/srv/catalog/records/{{uuid}}' is redirected to the API
      'http://localhost:8080/geonetwork/srv/api/records/{{uuid}}'.

      User may prefer to have custom resources links, eg.
      'http://data.geonetwork-opensource.org/records/{{uuid}}'. In that case,
      set the resource identifier to 'http://data.geonetwork-opensource.org/'.

      Resources URI scheme is the following:
      * /resources/{{uuid}}: Not resolvable
      * /resources/records/{{uuid}}
      * /resources/datasets/{{uuid}}
      * /resources/organizations/{{name}}: Not resolvable
      * /resources/persons/{{email}}: Not resolvable
      * /resources/registries/vocabularies/{{thesaurusIdentifier}}:
      * /resources/registries/vocabularies/{{thesaurusIdentifier}}/concepts/{{keywordName}}

    </note>
    <from>^(.*)/resources/(.*)$</from>
    <to type="forward">$1/api/$2</to>
  </rule>



  <!-- Rule to redirect old deprecated @json requests -->
  <rule>
    <condition name="content-type" operator="notequal">multipart/form-data</condition>
    <from>^(.+)@json$</from>
    <to type="permanent-redirect">%{context-path}$1?_content_type=json</to>
  </rule>
  <rule>
    <condition name="content-type" operator="notequal">multipart/form-data</condition>
    <from>^(.+)@json(\?.*)$</from>
    <to type="permanent-redirect">%{context-path}$1$2&amp;_content_type=json</to>
  </rule>
  <rule>
    <from>^(.*)/ar/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/ara/$2</to>
  </rule>
  <rule>
    <from>^(.*)/ca/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/cat/$2</to>
  </rule>
  <rule>
    <from>^(.*)/cn/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/chi/$2</to>
  </rule>
  <rule>
    <from>^(.*)/nl/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/dut/$2</to>
  </rule>
  <rule>
    <from>^(.*)/fi/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/fin/$2</to>
  </rule>
  <rule>
    <from>^(!doc)(.*)/fr/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/fre/$2</to>
  </rule>
  <rule>
    <from>^(.*)/de/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/ger/$2</to>
  </rule>
  <rule>
    <from>^(.*)/no/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/nor/$2</to>
  </rule>
  <rule>
    <from>^(.*)/pt/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/por/$2</to>
  </rule>
  <rule>
    <from>^(.*)/ru/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/rus/$2</to>
  </rule>
  <rule>
    <from>^(.*)/es/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/spa/$2</to>
  </rule>
  <rule>
    <from>^(!doc)(.*)/en/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/eng/$2</to>
  </rule>
  <rule>
    <from>^(.*)/tr/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/tur/$2</to>
  </rule>
  <rule>
    <from>^(.*)/it/(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/ita/$2</to>
  </rule>
  <rule>
    <note>
      Retrieves robots.txt filemap pointing to sitemaps for better indexing.
    </note>
    <from>^/robots.txt$</from>
    <to type="forward" last="true">/srv/eng/robots.txt</to>
  </rule>

  <!-- Use new home service because it performs a faster redirect -->
  <rule>
    <from>^/([^/]*)/(\w\w\w)/home$</from>
    <to type="permanent-redirect" last="true">%{context-path}/home?hl=$2&amp;node=$1</to>
  </rule>

  <!-- Use redirects to handle the initial entry points -->
  <rule>
    <from>^/$</from>
    <to type="permanent-redirect" last="true">%{context-path}/home</to>
  </rule>
  <rule>
    <from>^/\?(.*)$</from>
    <to type="permanent-redirect" last="true">%{context-path}/home?$1</to>
  </rule>
  <rule>
    <from>^/index.html$</from>
    <to type="permanent-redirect" last="true">%{context-path}/home</to>
  </rule>
  <rule>
    <from>^/index.jsp$</from>
    <to type="permanent-redirect" last="true">%{context-path}/home</to>
  </rule>
  <rule>
    <from>^/(?!signin$)(?!signout$)(?!home$)(?!monitor$)(?!\w*healthcheck$)(?!swagger-resources.*$)([a-zA-Z0-9_\-]+)$
    </from>
    <to type="permanent-redirect" last="true">%{context-path}/home?node=$1</to>
  </rule>
  <!-- Rules for RESTful urls for metadata retrieve -->
  <rule>
    <note>
      Retrieves mef format for a metadata.
      Example URL:
      http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.zip
    </note>
    <from>^/metadata/(.*)/(.*).zip$</from>
    <to type="forward">/srv/$1/mef.export?uuid=$2</to>
  </rule>

  <rule>
    <note>
      Retrieves xml format for a metadata.
      Example URL:
      http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.xml
    </note>
    <from>^/metadata/(.*)/(.*).xml$</from>
    <to type="forward">/srv/$1/xml.metadata.get?uuid=$2</to>
  </rule>

  <rule>
    <note>
      Retrieves RDF format for a metadata.
      Example URL:
      http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.rdf
    </note>
    <from>^/metadata/(.*)/(.*).rdf$</from>
    <to type="forward">/srv/$1/rdf.metadata.get?uuid=$2</to>
  </rule>

  <rule>
    <note>
      Retrieves pdf format for a metadata.
      Example URL:
      http://localhost:8080/geonetwork/metadata/eng/da165110-88fd-11da-a88f-000d939bc5d8.pdf
    </note>
    <from>^/metadata/(.*)/(.*).pdf$</from>
    <to type="forward">/srv/$1/pdf?uuid=$2</to>
  </rule>

  <rule>
    <note>
      The metadata formatted with a specific formatter.
      Example URL:
      http://localhost:8080/geonetwork/metadata/eng/clean/da165110-88fd-11da-a88f-000d939bc5d8.html
      Example URL:
      http://localhost:8080/geonetwork/metadata/eng/summary/da165110-88fd-11da-a88f-000d939bc5d8.xml
    </note>
    <from>^/metadata/(.*)/(.*)/(.*).(xml|html)$</from>
    <to type="forward">/srv/$1/metadata.formatter.$4?uuid=$3&amp;xsl=$4</to>
  </rule>

  <rule>
    <note>
      Retrieves html format for a metadata (one node mode only).
      Example URL: http://localhost:8080/geonetwork/metadata/da165110-88fd-11da-a88f-000d939bc5d8
    </note>
    <from>^/metadata/(.*)$</from>
    <to type="permanent-redirect">%{context-path}/?uuid=$1</to>
  </rule>
  <rule>
    <note>
      Redirects to hash with metadata
      Example URL: http://localhost:8080/geonetwork?uuid=da165110-88fd-11da-a88f-000d939bc5d8
    </note>
    <from>^/(.*)/catalog.search\?.*uuid=(.*)</from>
    <to type="permanent-redirect">%{context-path}/#/metadata/$2</to>
  </rule>
  <rule>
    <note>
      Redirects to hash with metadata (extjs-style permalinks)
      Example URL:
      http://localhost:8080/geonetwork/apps/search/?uuid=da165110-88fd-11da-a88f-000d939bc5d8
    </note>
    <from>^/apps/search/\?.*uuid=(.*)</from>
    <to type="permanent-redirect">%{context-path}/#/metadata/$1</to>
  </rule>
  <rule>
    <note>
      Retrieves html format for a metadata (multinode mode).
      Example URL:
      http://localhost:8080/geonetwork/{{nodeid}}/metadata/da165110-88fd-11da-a88f-000d939bc5d8
      redirect to
      http://localhost:8080/geonetwork/?node={{nodeid}}&amp;uuid=ca5e22d6-5bd3-4b6a-bcfb-11462f76cd10
    </note>
    <from>^/([a-zA-Z0-9_\-]+)/metadata/(.*)$</from>
    <to type="permanent-redirect">%{context-path}/?node=$1&amp;uuid=$2</to>
  </rule>

  <rule>
    <note>
      map the old xml.user.login to the new login url
    </note>
    <from>^.*/.*/xml.user.login(\?.*)</from>
    <to type="permanent-redirect" last="true">%{context-path}/signin$1</to>
  </rule>

  <!-- Rule for rss.latest to rss.search?sortBt=changeDate -->
  <rule>
    <note>
      map the old rss.latest service
    </note>
    <from>^(.*)/rss.latest(\.*)</from>
    <to type="permanent-redirect" last="true">%{context-path}$1/rss.search?sortBy=changeDate</to>
  </rule>


  <rule>
    <note>
      INSPIRE Atom OpenSearchDescription
    </note>
    <from>^/opensearch/(.*)/(.*)/OpenSearchDescription.xml$</from>
    <to type="forward">/srv/$1/atom.description?fileIdentifier=$2</to>
  </rule>

  <rule>
    <note>
      INSPIRE Atom search
    </note>
    <from>^/opensearch/(.*)/(.*)/search?(.*)$</from>
    <to type="forward">/srv/$1/atom.search?fileIdentifier=$2</to>
  </rule>

  <rule>
    <note>
      INSPIRE Atom search
    </note>
    <from>^/opensearch/(.*)/search?(.*)$</from>
    <to type="forward">/srv/$1/atom.search</to>
  </rule>

  <rule>
    <note>
      INSPIRE Atom Describe (service)
    </note>
    <from>^/opensearch/(.*)/(.*)/describe?(.*)$</from>
    <to type="forward">/srv/$1/atom.describe?fileIdentifier=$2</to>
  </rule>

  <rule>
    <note>
      INSPIRE Atom DescribeBy
    </note>
    <from>^/opensearch/(.*)/describe?(.*)$</from>
    <to type="forward">/srv/$1/atom.describe</to>
  </rule>


  <rule>
    <note>
      INSPIRE Atom GetData
    </note>
    <from>^/opensearch/(.*)/download?(.*)$</from>
    <to type="forward">/srv/$1/atom.download</to>
  </rule>

  <!-- Rules for direct links (for RDF at least) -->
  <rule>
    <note>
      Retrieves xml format for a metadata. No language
      Example URL: http://localhost:8080/geonetwork/metadata/da165110-88fd-11da-a88f-000d939bc5d8
    </note>
    <from>^/(metadata|resource)/(.*)$</from>
    <to type="forward">/srv/eng/xml.metadata.get?uuid=$1</to>
  </rule>

  <rule>
    <note>
      Retrieves xml format for a thesaurus
      Example URL:
      http://localhost:8080/geonetwork/thesaurus/external.theme.inspire-service-taxonomy
    </note>
    <from>^/thesaurus/(.*)$</from>
    <to type="forward">/srv/eng/thesaurus.download?ref=$1</to>
  </rule>

  <!-- /Rules for direct links (for RDF at least) -->


  <!-- Sitemap URLs -->
  <rule>
    <note>
      sitemap with format and page number
    </note>
    <from>^/sitemap/(.*)/([0-9]+)/(.*)$</from>
    <to type="forward">/srv/$3/portal.sitemap?doc=$2&amp;format=$1</to>
  </rule>

  <rule>
    <note>
      sitemap with page number
    </note>
    <from>^/sitemap/([0-9]+)/(.*)$</from>
    <to type="forward">/srv/$2/portal.sitemap?doc=$1</to>
  </rule>


  <rule>
    <note>
      sitemap with format
    </note>
    <from>^/sitemap/(.*)/(.*)$</from>
    <to type="forward">/srv/$2/portal.sitemap?format=$1</to>
  </rule>

  <rule>
    <note>
      sitemap
    </note>
    <from>^/sitemap/(.*)$</from>
    <to type="forward">/srv/$1/portal.sitemap</to>
  </rule>

  <rule>
    <note>
      sitemap
    </note>
    <from>^/sitemap$</from>
    <to type="forward">/srv/eng/portal.sitemap</to>
  </rule>
  <!-- Sitemap URLs -->

  <!-- hide jsession id from google bot -->
  <outbound-rule encodefirst="true">
    <condition name="user-agent">googlebot.*</condition>
    <from>^(.*);jsessionid=.*(\?.*)$</from>
    <to>$1$2</to>
  </outbound-rule>

</urlrewrite>
