<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
  <context:annotation-config/>

  <context:property-placeholder location="${app.properties},file://#{systemEnvironment['geonetwork_dir']}/config/app.properties"
                                ignore-unresolvable="true"
                                ignore-resource-not-found="true"
                                file-encoding="UTF-8"/>

  <import resource="config-spring-env.xml"/>
  <import resource="config-security/config-security.xml"/>
  <import resource="classpath:JZkitApplicationContext.xml"/>

  <import resource="config-db/initial_data.xml"/>
  <import resource="config-print/config-spring-print.xml"/>
  <import resource="config-etf-validator.xml"/>

  <!-- For database configuration look in the config-node configuration files (config-node/srv.xml) -->

  <!-- Import the versioning configuration (subversion etc...) -->
  <import resource="config-versioning.xml"/>

  <bean id="nodeInfo"
        class="org.fao.geonet.NodeInfo"
        scope="request">
    <aop:scoped-proxy/>
    <property name="id" value="srv"/>
    <property name="defaultNode" value="true"/>
  </bean>

  <bean name="statusActionFactory"
        class="org.fao.geonet.kernel.metadata.StatusActionsFactory">
    <constructor-arg name="className" value="org.fao.geonet.kernel.metadata.DefaultStatusActions"/>
  </bean>


  <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
  </bean>

  <bean id="httpRequestFactor" class="org.fao.geonet.utils.GeonetHttpRequestFactory">
    <property name="numberOfConcurrentRequests" value="30"/>
  </bean>

  <bean id="language" class="org.fao.geonet.web.DefaultLanguage">
    <property name="language" value="\${language.default}"/>
    <property name="forceDefault" value="\${language.forceDefault}"/>
  </bean>

  <!-- Define the languages in the UI. Seems like these should come from database
    at some point but at the moment they are needed here. -->
  <util:set id="languages" value-type="java.lang.String">
    <value>ara</value>
    <value>cat</value>
    <value>chi</value>
    <value>cze</value>
    <value>dut</value>
    <value>dan</value>
    <value>eng</value>
    <value>fin</value>
    <value>fre</value>
    <value>ger</value>
    <value>ice</value>
    <value>ita</value>
    <value>kor</value>
    <value>nor</value>
    <value>pol</value>
    <value>por</value>
    <value>rus</value>
    <value>slo</value>
    <value>spa</value>
    <value>swe</value>
    <value>tur</value>
    <value>wel</value>
  </util:set>

  <util:map id="jpaPropertyMap">
    <entry key="shared-cache-mode" value="ENABLE_SELECTIVE"/>
    <entry key="javax.persistence.lock.timeout" value="30000"/>
    <entry key="org.hibernate.flushMode" value="AUTO"/>
    <entry key="access" value="PROPERTY"/>
    <entry key="hibernate.id.new_generator_mappings" value="true"/>
    <entry key="hibernate.cache.use_second_level_cache" value="true"/>
    <!--<entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.internal.NoCachingRegionFactory"/> -->
    <entry key="hibernate.cache.region.factory_class"
           value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
    <entry key="hibernate.jdbc.batch_size" value="3"/>
    <entry key="hibernate.jdbc.batch_versioned_data" value="true"/>
    <entry key="hibernate.enable_lazy_load_no_trans" value="true"/>
    <!-- If db migration is off, disable automatic updates, but notify changes using validate -->
    <!-- options: none, validate, update, create, create-drop, create-only -->
    <entry key="hibernate.hbm2ddl.auto" value="#{'\${db.migration_onstartup}' ? 'update' : 'validate'}"/>

    <!-- If a specific schema has to be used
    <entry key="hibernate.default_schema" value="catalog"/>

    Note: If using more than one catalog in different schema
    hibernate may failed to create sequence
    (https://hibernate.atlassian.net/browse/HHH-5538).
    In that case you may want to use a custom dialect
    <entry key="hibernate.dialect" value="org.fao.geonet.dialect.CustomPostgreSQLDialect" />
    -->

  </util:map>

  <util:list id="wro4jUrlsToInitialize" value-type="java.lang.String">
    <value>lib.js</value>
    <value>nv.d3.css</value>
    <value>gn_search_default.css</value>
    <value>gn_search_default.js</value>
    <value>gn_editor_default.css</value>
    <value>gn_editor.js</value>
    <value>gn_admin_default.css</value>
    <value>gn_admin.js</value>
    <value>gn_login_default.css</value>
    <value>srv_custom_style.css</value>
    <value>gn_login.js</value>
  </util:list>

  <util:list id="formattersToInitialize" value-type="java.lang.String"/>

  <util:set id="formatterRemoteFormatAllowedHosts" value-type="java.lang.String"></util:set>
  <bean id="threadResources" class="org.mapfish.print.ThreadResources">
    <property name="connectionTimeout" value="30000"/>
    <property name="socketTimeout" value="30000"/>
    <property name="globalParallelFetches" value="50"/>
    <property name="perHostParallelFetches" value="10"/>
  </bean>

  <util:set id="regionGetMapExpandFactors" set-class="java.util.TreeSet">
    <bean class="org.fao.geonet.api.records.extent.ExpandFactor"
          p:proportion=".0005" p:factor="2"/>
    <bean class="org.fao.geonet.api.records.extent.ExpandFactor"
          p:proportion=".01" p:factor=".5"/>
    <bean class="org.fao.geonet.api.records.extent.ExpandFactor"
          p:proportion=".015" p:factor=".2"/>
  </util:set>


  <!--
   WMS:
   ====

     The configuration URL will have the following placeholders replaced with actual values;

        + {minx} and {MINX}
        + {miny} and {MINY}
        + {maxx} and {MAXX}
        + {maxy} and {MAXY}
        + {srs}  and {SRS}
        + {width} and {WIDTH}
        + {height} and {HEIGHT}

     with the necessary values from the request.

     For example, the URL might look like this;
     https://ows.terrestris.de/osm/service?SERVICE=WMS&REQUEST=GetMap&VERSION=1.1.0&LAYERS=OSM-WMS&STYLES=default&SRS={srs}&BBOX={minx},{miny},{maxx},{maxy}&WIDTH={width}&HEIGHT={height}&FORMAT=image/png

    WMTS:
    =====

    The configuration should be a json string with the following attributes;

    wmtsGetCapabilitiesURL - (required) URL to the GetCapabilities for the WMTS service
    layerName - (required)  Name of the layer to use (in the WMTS GetCapabilities)

    matrixSet - (optional, default is the same as SRID) Name of the WMTS GetCapabilities matrixSet to use (hardcoded for all requests)
    SRID2MatrixSet - (optional, default is no translation)
    flip4326 - (optional, default is NO)

    Typically, you should just need to set the `wmtsGetCapabilitiesURL` and `layerName`.
    In this case, it will use the WMTS matrixSet with the same name as the SRS.

    If you want to ALWAYS (!!) use a specific matrixSet, you can use the `matrixSet` parameter.

    If the WMTS doesn't use the SRS as the name of the matrixSets, you can use the SRID2MatrixSet to convert the SRID
    to a matrixSet.

    Most WMTS systems will use YX ordering for EPSG:4326.  If you are supplying coordinates in XY ordering, you will
    likely need to set flip4326 to true.

    EXAMPLE

    {
        "wmtsGetCapabilitiesURL":"URL",
        "layerName":"LAYERNAME",
        "SRID2MatrixSet": {
             "EPSG:900913":"EPSG:3857"
        },
        "flip4326": true
    }

    A request for SRID EPSG:1234 will use the "EPSG:1234" matrixSet.
    A request for SRID EPSG:900913 will use the "EPSG:3857" matrixSet (SRID2MatrixSet).
    If the request is for EPSG:4326, the request bbox (AOI) will be flipped from XY to YX.
  -->
  <util:map id="regionGetMapBackgroundLayers">
    <entry key="osm"
           value="\${map.bbox.background.service}"/>
  </util:map>

    <bean class="org.fao.geonet.kernel.datamanager.draft.DraftMetadataIndexer"/>
    <bean class="org.fao.geonet.kernel.datamanager.draft.DraftMetadataManager"/>
    <bean class="org.fao.geonet.kernel.datamanager.draft.DraftMetadataUtils">
      <property name="listOfStatusCreatingDraft">
        <util:set>
          <util:constant static-field="org.fao.geonet.domain.StatusValue.Status.APPROVED"/>
        </util:set>
      </property>
    </bean>

  <!-- In order to get non-draft metadata  uncomment the definitions below,
    or make them available in an external override file -->
<!--
    <bean primary="true" class="org.fao.geonet.kernel.datamanager.base.BaseMetadataIndexer"/>
    <bean primary="true" class="org.fao.geonet.kernel.datamanager.base.BaseMetadataManager"/>
    <bean primary="true" class="org.fao.geonet.kernel.datamanager.base.BaseMetadataUtils"/>
-->

  <bean id="strongEncryptor"
        class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor" />

  <bean id="encryptorInitialiser"
        class="org.fao.geonet.EncryptorInitializer" />

  <!-- Secured map services configuration -->
  <!-- For security reasons BASIC auth will only allow userProxy=true as we don't want to expose the credentials in the javascript client -->
  <util:list id="securedMapServices" value-type="org.fao.geonet.domain.mapservices.MapService">
    <!-- Sample secured map services -->
    <!--bean class="org.fao.geonet.domain.mapservices.MapService"
          p:url="http://map1.com" p:useProxy="true" p:authType="BEARER"/-->

    <!--bean class="org.fao.geonet.domain.mapservices.MapService"
          p:url="http:\/\/map1[A-Z].com" p:useProxy="true" p:authType="BASIC" p:urlType="REGEXP" p:username="test" p:password="testpass"/-->
  </util:list>

  <util:map id="translationPacks">
    <entry key="gnui">
      <util:list>
        <value>json/gnui</value>
        <value>standards/iso19139/codelists/gmd:MD_TopicCategoryCode+gmd:MD_ScopeCode+gmd:MD_MaintenanceFrequencyCode+gmd:MD_ProgressCode+gmd:DS_InitiativeTypeCode+gmd:MD_SpatialRepresentationTypeCode</value>
        <value>standards/iso19115-3.2018/codelists/cit:CI_DateTypeCode</value>
        <value>db/MetadataCategory+Operation+Group+StatusValue+Source+Translations</value>
      </util:list>
    </entry>
    <entry key="login">
      <util:list>
        <value>json/core</value>
      </util:list>
    </entry>
    <entry key="search">
      <util:list>
        <value>json/core+search+v4+custom</value>
        <value>json/schemas</value>
        <value>standards/iso19139/codelists/gmd:MD_TopicCategoryCode+gmd:MD_ScopeCode+gmd:MD_MaintenanceFrequencyCode+gmd:MD_ProgressCode+gmd:MD_SpatialRepresentationTypeCode</value>
        <value>standards/iso19115-3.2018/codelists/cit:CI_DateTypeCode+indeterminatePosition+mri:DS_InitiativeTypeCode+mri:DS_AssociationTypeCode+cit:CI_RoleCode</value>
        <value>standards/iso19139/labels/gmd:DQ_ThematicClassificationCorrectness+gmd:DQ_AbsoluteExternalPositionalAccuracy+gmd:DQ_AccuracyOfATimeMeasurement+gmd:DQ_CompletenessCommission+gmd:DQ_CompletenessOmission+gmd:DQ_ConceptualConsistency+gmd:DQ_ConformanceResult+gmd:DQ_DataQuality+gmd:DQ_DomainConsistency+gmd:DQ_EvaluationMethodTypeCode+gmd:DQ_FormatConsistency+gmd:DQ_GriddedDataPositionalAccuracy+gmd:DQ_NonQuantitativeAttributeAccuracy+gmd:DQ_QuantitativeAttributeAccuracy+gmd:DQ_RelativeInternalPositionalAccuracy+gmd:DQ_TemporalConsistency+gmd:DQ_TemporalValidity+gmd:DQ_ThematicClassificationCorrectness+gmd:DQ_TopologicalConsistency</value>
        <value>db/MetadataCategory+Operation+Group+StatusValue+Source+Translations</value>
      </util:list>
    </entry>
    <entry key="admin">
      <util:list>
        <value>json/core+search+admin+v4+custom</value>
        <value>json/schemas</value>
        <value>db/MetadataCategory+Operation+Group+StatusValue+Source+Translations</value>
      </util:list>
    </entry>
    <entry key="editor">
      <util:list>
        <value>json/core+search+editor+v4+custom</value>
        <value>json/schemas</value>
        <value>standards/iso19139/codelists/gmd:MD_TopicCategoryCode+gmd:MD_ScopeCode+gmd:MD_MaintenanceFrequencyCode+gmd:MD_ProgressCode+gmd:MD_SpatialRepresentationTypeCode</value>
        <value>standards/iso19115-3.2018/codelists/cit:CI_DateTypeCode+indeterminatePosition+mri:DS_InitiativeTypeCode+mri:DS_AssociationTypeCode+cit:CI_RoleCode</value>
        <value>db/MetadataCategory+Operation+Group+StatusValue+Source+Translations</value>
      </util:list>
    </entry>
  </util:map>

  <!--
  Bean with the default publication configuration.
  The default publication options publishes the metadata to the ALL group and the INTRANET group.
  -->
  <bean class="org.fao.geonet.config.DefaultPublicationConfig" name="publicationConfig" />
</beans>
