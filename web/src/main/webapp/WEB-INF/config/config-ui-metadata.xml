<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<geonet>
  <services package="org.fao.geonet">
    <service name="catalog.edit">
      <documentation>Metadata editor</documentation>
      <output sheet="../xslt/ui-metadata/editor.xsl">
        <xml name="i18n" file="xml/i18n.xml"/>
      </output>
    </service>

    <service name="catalog.viewer">
      <documentation>Map viewer</documentation>
      <output sheet="../xslt/ui-metadata/viewer.xsl">
        <xml name="i18n" file="xml/i18n.xml"/>
      </output>
    </service>

    <service name="md.view">
      <documentation>View a metadata record</documentation>
      <class name=".services.metadata.View"/>
      <output sheet="../xslt/ui-metadata/view/view.xsl">
        <xml name="i18n" file="xml/i18n.xml"/>
      </output>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="display">
      <documentation>View a metadata record using one of the formatters</documentation>
      <output sheet="../xslt/ui-metadata/view/formatter-viewer.xsl">
        <xml name="i18n" file="xml/i18n.xml"/>
      </output>
    </service>


    <service name="md.rate">
      <documentation>Rate a metadata record.

        Parameters:
        * uuid or id
        * rating: Integer value from 1 to 5
      </documentation>
      <class name=".services.metadata.Rate"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.create">
      <documentation><![CDATA[
        Create a new metadata from a template or an existing record.

        Parameters are:
        * uuid or id: the record to start from
        * template: is this new record a metadata or a template. Value y or n
        * child: to create a child of the record. Value y or n
        * currTab: the tab to start with
        * fullPrivileges: all privileges for the group. default is false.

        ]]></documentation>
      <class name=".services.metadata.Create">
        <param name="editTab" value="true"/>
      </class>
    </service>

    <service name="md.privileges">
      <documentation><![CDATA[
          Return privileges info for a metadata record.

          Parameters are:
          * id: Metadata identifier
          ]]></documentation>
      <class name=".services.metadata.GetAdminOper"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.privileges.update">
      <documentation><![CDATA[
          Update privileges info for a metadata record.

          Parameters:
          * id: Metadata identifier
          * _<groupId>_<operationId>: on or off to activate or not an operation for a group.
          ]]></documentation>
      <class name=".services.metadata.UpdateAdminOper"/>
    </service>

    <service name="md.privileges.batch">
      <documentation><![CDATA[
          Return operations and groups for the user.
          ]]></documentation>
      <class name=".services.metadata.PrepareBatchUpdatePrivileges"/>
    </service>

    <service name="md.privileges.batch.update">

      <documentation><![CDATA[
          Update privileges info for a set of metadata records.

          Parameters:
          * _<groupId>_<operationId>: on or off to activate or not an operation for a group.
          ]]></documentation>
      <class name=".services.metadata.BatchUpdatePrivileges"/>
    </service>

    <service name="md.group.update">
      <documentation><![CDATA[
          Change the group the metadata is in. Groupowner database column.

          Parameters are:
          * id: Metadata identifier
          * groupid: Group identifier
          ]]></documentation>
      <class name=".services.metadata.UpdateGroupOwner"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.delete">
      <documentation><![CDATA[
        Delete a new metadata

        Parameters are:
        * uuid or id: the record to start from

        ]]></documentation>
      <class name=".services.metadata.Delete"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.edit">
      <documentation>
        <![CDATA[
        Edit a metadata record.

        Parameters:
        * id or uuid
        * tab
        ]]></documentation>
      <class name=".services.metadata.GetEditableData"/>
      <output sheet="../xslt/ui-metadata/edit/edit.xsl">
        <call name="thesaurus" class=".services.thesaurus.GetList"/>
        <call name="currTab" class=".guiservices.util.GetCurrentMDTab"/>
        <xml name="i18n" file="xml/i18n.xml"/>
      </output>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.edit.saveonly">
      <documentation><![CDATA[
        Save the metadata record currently edited.
        md.edit should be used first to initialized the
        editing session.

        Return the following response if success:
        ```
        <response>
          <id>1190</id>
          <showvalidationerrors>false</showvalidationerrors>
          <minor>false</minor>
        </response>
        ```
        ]]></documentation>
      <class name=".services.metadata.Update"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.edit.save">
      <documentation>
        <![CDATA[
        Save a metadata record and return the new form.
        ]]>
      </documentation>
      <class name=".services.metadata.Update"/>
      <output forward="md.edit"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.edit.save.and.close">
      <documentation><![CDATA[
        Terminate an editing session.
        ]]></documentation>
      <class name=".services.metadata.Update">
        <param name="finished" value="yes" />
      </class>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.edit.cancel">
      <documentation><![CDATA[
        Cancel editing session.
        ]]></documentation>
      <class name=".services.metadata.Update">
        <param name="forget" value="yes"/>
        <param name="finished" value="yes"/>
      </class>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.edit.commit">
      <documentation>
        <![CDATA[
        Save a metadata record and return the new form.
         This version will update the session with the new begin metadata so
         that a cancel will rollback to this point.
        ]]>
      </documentation>
      <class name=".services.metadata.Update">
        <param name="starteditingsession" value="yes"/>
      </class>
      <output forward="md.edit"/>
      <error sheet="../xslt/common/error.xsl"/>
    </service>

    <service name="md.element.add">
      <documentation><![CDATA[
                Add an element or attribute to the metadata record.

                Parameters are:
                * ref: parent element reference
                * name: element name
                * child=geonet:attribute to add attribute

                TODO: Check if all those call are necessary
                ]]></documentation>
      <class name=".services.metadata.AddElement"/>

      <output sheet="../xslt/ui-metadata/edit/edit-embedded.xsl">
        <call name="currTab" class=".guiservices.util.GetCurrentMDEditingTab"/>
        <call name="position" class=".guiservices.util.GetPositionMD"/>
        <call name="groups" class=".guiservices.groups.GetMine"/>
        <call name="sources" class=".guiservices.util.Sources"/>
        <call name="subtemplates" class="jeeves.services.db.Select">
          <param name="db" value="main-db"/>
          <param name="query"
                 value="SELECT distinct(root) AS type FROM metadata WHERE isTemplate = 's'"/>
        </call>
      </output>

    </service>

    <service name="md.element.remove">
      <documentation><![CDATA[
                Remove an element to the metadata record.

                Parameters are:
                * ref: parent element reference
                * parent: parent element reference

                TODO: Check if all those call are necessary
                ]]></documentation>
      <class name=".services.metadata.DeleteElement"/>
    </service>

    <service name="md.attribute.remove">
      <class name=".services.metadata.DeleteAttribute"/>
    </service>

    <service name="md.element.down" deprecated="true">
      <documentation><![CDATA[
        Move an element at preceding position.
        ]]></documentation>
      <class name=".services.metadata.MoveElement">
        <param name="dir" value="down"/>
      </class>

    </service>

    <service name="md.element.up" deprecated="true">
      <documentation><![CDATA[
        Move an element at following position.
        ]]></documentation>
      <class name=".services.metadata.MoveElement">
        <param name="dir" value="up"/>
      </class>
    </service>

    <service name="md.element.info">
      <documentation><![CDATA[
            Get help on an element.

            POST request, body is :
            <request>
              <element schema="iso19139" name="gmd:protocol" context="gmd:CI_OnlineResource"
                  fullContext="gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/
                               gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol"
                  isoType="" />
            </request>

            ]]></documentation>

      <class name=".services.schema.Info"/>
    </service>

    <service name="md.thumbnail.remove">
      <documentation><![CDATA[
        Delete a thumbnail from the data diretory and detach
        it to the metadata record.
        ]]></documentation>
      <class name=".services.thumbnail.Unset"/>
    </service>

    <service name="md.relations">
      <documentation>Return a list of all relation of the given metadata. Relations are mainly
        online resources
        like thumbnails, onlineresources etc ..
      </documentation>
      <class name=".guiservices.metadata.GetRelated"/>
      <output sheet="../xslt/services/metadata/relation.xsl" contentType="text/xml; charset=UTF-8"/>
    </service>

    <service name="md.suggestion">
      <documentation><![CDATA[
        Get suggestion for all metadata.
        Paremeters
        * action could be 'list' or 'analyse'
        * process
        ]]></documentation>
      <class name=".services.metadata.GetSuggestion"/>
    </service>

    <service name="md.validate">
      <documentation><![CDATA[
        Validate a metadata and validation report report.

        The metadata must be in editing mode. The metadata in session is used.

        Parameters:
        * id: The metadata id

        ]]></documentation>
      <class name=".services.metadata.Validate"/>
      <output sheet="../xslt/services/metadata/validate.xsl" contentType="text/xml; charset=UTF-8"/>
    </service>

    <service name="md.category.update">
      <documentation><![CDATA[
        Update metadata category by first removing all existing
        and then setting the one provided in parameters.

        Parameters:
        * id: The metadata id
        * _<category_id>=on : The category ids

        ]]></documentation>
      <class name=".services.metadata.UpdateCategories"/>
    </service>

    <service name="md.category.batch.update">
      <class name=".services.metadata.BatchUpdateCategories"/>
    </service>

    <service name="md.versioning.start">
      <documentation><![CDATA[
        Start versioning of a metadata record

        Parameters:
        * id: The metadata id
        ]]></documentation>
      <class name=".services.metadata.Version"/>
    </service>

    <service name="md.batch.versioning">
      <documentation><![CDATA[
        Start versioning of the selected records

        ]]></documentation>
      <class name=".services.metadata.BatchVersion"/>
    </service>


    <service name="md.status.list">
      <documentation><![CDATA[
        Get the list of all possible status.
        ]]></documentation>
      <class name=".services.metadata.GetStatus"/>
    </service>


    <service name="md.status.update">

      <documentation><![CDATA[
        Update metadata status.

        Parameters:
        * id: The metadata id
        * status: The new status
        * changeMessage: The log message
        ]]></documentation>
      <class name=".services.metadata.UpdateStatus"/>
    </service>
  </services>
</geonet>
