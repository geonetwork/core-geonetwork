<?xml version="1.0" encoding="UTF-8"?>
<geonet>
    <services package="org.fao.geonet">

        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <!-- Statistics services                                           -->
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

		<!-- - - - - Main service - - - -->
		<service name="stat.main">
			<output sheet="statistics/stat.xsl">
				<xml name="statistics" file="xml/config.xml" />
			</output>
		</service>
		
		<!-- - - - - Searches with no hit  - - - -->
        <service name="stat.searchesNoHit">
            <output sheet="statistics/searches-no-hit.xsl">
                <call name="search" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query"
                        value="select count(*) as totalcount, nohit from requests a, (select count(*) nohit from requests where hits=0) as b"
                    />
                </call>
            </output>
        </service>
        
		<!-- - - - - unique IP  - - - -->
        <service name="stat.uniqueIP">
            <output sheet="statistics/unique-ip.xsl">
                <call name="searchUniqueIP" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query"
                        value="select ip, count(*) as sumhit from requests where autogenerated = 0 group by ip order by sumhit desc"
                    />
                </call>
            </output>
        </service>

		<!-- - - - - simple/advanced searches -->
        <service name="stat.simpleAdvancedSearch">
            <output sheet="statistics/simple-advanced-search.xsl">
                <call name="simpleAdvancedSearch" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query"
                        value="select simple, count(*) as cnt from requests where autogenerated = 0 group by simple"
                    />
                </call>
            </output>
        </service>

		<!-- - - - - MD popularity 
        <service name="stat.mdPopularity">
            <output sheet="statistics/md-popularity.xsl">
                <call name="mdPopularity" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query"
                        value="select id, uuid, popularity from metadata where popularity >= 1 order by popularity desc"
                    />
                </call>
                <xml name="statparams" file="WEB-INF/config-stats-params.xml" localized="false"/>
            </output>
        </service>
        -->
		<!-- - - - - MD popularity by Java, to pass limit parameter to XSLT -->
        <service name="stat.mdPopularity">
            <output sheet="statistics/md-popularity.xsl">
                <call name="mdPopularity" class=".services.statistics.MdPopularity">
                    <!-- the max number of result to display in the UI -->
                    <param name="limit" value="10"/>
                    <param name="query"
                        value="select id, uuid, popularity from metadata where popularity >= 1 order by popularity desc"
                    />
                </call>
            </output>
        </service>

		<!-- - - - - searches during a date range. graphic display  - - - -->
        <service name="stat.graphByDate">
            <output sheet="statistics/graph-by-date.xsl">
                <call name="graphByDate" class=".services.statistics.RequestsByDate">
                    <param name="createLegend" value="false"/>
                    <param name="createTooltips" value="true"/>
                    <param name="tickUnit" value="2"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartHeight" value="400"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartWidth" value="600"/>
                </call>
            </output>
        </service>
        
		<!-- - - - - MD group popularity (sum of MD popularity group by groupid  - - - -->
        <service name="stat.groupPopularity">
            <output sheet="statistics/graph-group-popularity.xsl">
                <call name="graphByGroupPopularity" class=".services.statistics.GroupsPopularity">
                    <param name="createLegend" value="false"/>
                    <param name="createTooltips" value="true"/>
                    <param name="tickUnit" value="2"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartHeight" value="400"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartWidth" value="600"/>
                    <!--  the sql query to generate graph. CAUTION when modifying this query: java code and XSL page 
                    expect the following columns to be returned:  
                    	popularity (sum of popu per group), groupid: the group identifier, groupname: the group name -->
                    <param name="query"
                    		value="select sum(metadata.popularity) as popularity, groups.id as groupid, groups.name as groupname from metadata, groups where metadata.id IN (SELECT metadataid FROM OperationAllowed WHERE operationid = 0 AND groupid = groups.id) and groups.id > 1 group by groups.id, groups.name"/>
                </call>
            </output>
        </service>
        
		<!-- - - - - category popularity (sum of MD popularity group by category  - - - -->
        <service name="stat.categoryPopularity">
            <output sheet="statistics/graph-category-popularity.xsl">
                <call name="graphByCategoryPopularity" class=".services.statistics.CategoriesPopularity">
                    <param name="createLegend" value="false"/>
                    <param name="createTooltips" value="true"/>
                    <param name="tickUnit" value="2"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartHeight" value="400"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartWidth" value="600"/>
                    <!--  the sql query to generate graph. CAUTION when modifying this query: java code and XSL page 
                    expect the following columns to be returned:  
                    	popularity (sum of popu per category), categoryid: the category identifier, categoryname: the category name -->
                    <param name="query"
                    		value="select sum(metadata.popularity) as popularity, metadatacateg.categoryid as categoryid, categories.name as categoryname from metadata, metadatacateg, categories where metadata.id = metadatacateg.metadataid and metadatacateg.categoryid = categories.id group by metadatacateg.categoryid, categories.name"/>
                </call>
            </output>
        </service>
        
		<!-- - - - - catalog popularity (sum of MD popularity group by nodeid  - - - -->
        <service name="stat.catalogPopularity">
            <output sheet="statistics/graph-catalog-popularity.xsl">
                <call name="graphByCatalogPopularity" class=".services.statistics.CatalogsPopularity">
                    <param name="createLegend" value="false"/>
                    <param name="createTooltips" value="true"/>
                    <param name="tickUnit" value="2"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartHeight" value="400"/>
                    <!--  default chart height. can be overloaded through UI -->
                    <param name="chartWidth" value="600"/>
                    <!--  the sql query to generate graph. CAUTION when modifying this query: java code and XSL page 
                    expect the following columns to be returned:  
                    	popularity (sum of popu per group), groupid: the group identifier, groupname: the group name -->
                    <param name="query"
                    		value="select sum(popularity) as popu, source from metadata group by source"/>
                </call>
            </output>
        </service>
        
		<!-- - - - - basic stats during last month  - - - -->
        <service name="stat.lastMonthSummary">
            <output sheet="statistics/last-month-summary.xsl">
                <call name="lastMonthSummary" class=".services.statistics.LastMonthSummary"></call>
            </output>
        </service>
        
		<!-- - - - - mostSearchedCategory. also provides tagcloud functions  - - - -->
        <service name="stat.mostSearchedCategory">
            <output sheet="statistics/most-searched-categories.xsl">
                <call name="mostSearchedCategory" class=".services.statistics.MostSearchedCategory">
                    <param name="luceneTermFields" value="'_cat'"/>
                    <!-- the maximum number of results to return, as it may be huge, or -1 to get all results. -->
                    <param name="maxHits" value="40"/>
                </call>
            </output>
        </service>

		<!-- - - - - mostSearchedKeyword. also provides tagcloud functions  - - - -->
        <service name="stat.mostSearchedKeyword">
            <output sheet="statistics/most-searched-keywords.xsl">
                <call name="mostSearchedKeyword" class=".services.statistics.MostSearchedKeyword">
                <!-- a coma-separated, single-quoted list of Lucene termField to exclude from the searched keyword.
                	leaving this parameter empty will lead to biaised stats where config lucene keywords will be displayed
                    Please also have a look at WEB-INF/config.xml, for the statLuceneTermsToExlude parameter, that also controls
                    which lucene terms are logged
                 -->
                    <param name="luceneTermFieldsToExclude" value="'_op0','_op1','_op2','_op3','_op4','_op5','_op6','_isTemplate', '_locale', '_cat', '_owner', '_dummy', 'type'"/>
                    <!-- the maximum number of results to return, as it may be huge, or -1 to get all results. -->
                    <param name="maxHits" value="20"/>
                </call>
            </output>
        </service>
        
        <!--  CSV export for Requests table
        <service name="stat.requests.csv">
            <output sheet="statistics/to-csv.xsl" contentType="text/plain; charset=UTF-8">
                <call name="statCSV" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query"
                        value="select id, requestDate, ip, query, hits, lang, sortBy, spatialFilter, type, simple from requests"
                    />
                </call>
            </output>
        </service>
         -->
        <!--  CSV export for Params table, through Java service,
        <service name="stat.params.csv">
            <output sheet="statistics/to-csv.xsl" contentType="text/plain; charset=UTF-8">
                <call name="statCSV" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query"
                        value="select id, requestId, queryType, termField, termText, similarity, lowerText, upperText, inclusive from params"
                    />
                </call>
            </output>
        </service>
         -->
        <!--  CSV export for statistics tables, through a Jeeves service => all tables data are loaded into memory before their processing -->
        <service name="stat.tableExport">
            <output sheet="statistics/to-csv_from_java.xsl" contentType="text/plain; charset=UTF-8">
                <call name="statCSV" class=".services.statistics.TableExport">
                    <!-- currently the only supported value, (required)  -->
                    <param name="exportType" value="CSV"/>
                    <!-- The CSV separator (required)  -->
                    <param name="csvSeparator" value=";"/>
                    <!-- True to write columns (header) informations at the beginning of the file (required),
                         false to dump only data -->
                    <param name="dumpHeader" value="true"/>
                </call>
            </output>
        </service>

        <!--  Searched terms tag cloud
        <service name="stat.tagCloud">
            <output sheet="statistics/tagcloud.xsl">
                <call name="tagcloud" class="jeeves.services.db.Select">
                    <param name="db" value="main-db"/>
                    <param name="query" 
                    	value="select count(termtext) as tagcount, termtext from params where termfield not in ('_op0','_op1','_op2','_op3','_op4','_op5','_op6','_isTemplate', '_locale', '_owner', '_groupOwner', '_dummy', 'type') group by termtext having count(termtext) > 0  order by tagcount desc"
                    />
                </call>
                <xml name="statparams" file="WEB-INF/config-stats-params.xml" localized="false"/>
            </output>
        </service>
         -->

        <!--  Searched terms tag cloud -->
        <service name="stat.tagCloud">
            <output sheet="statistics/tagcloud.xsl">
                <call name="tagcloud" class=".services.statistics.TagCloud">
                    <!-- the max number of result to display in the UI -->
                    <param name="limit" value="10"/>
                    <param name="query"
                    	value="select count(termtext) as tagcount, termtext from params where termfield not in ('_op0','_op1','_op2','_op3','_op4','_op5','_op6','_isTemplate', '_locale', '_owner', '_cat', '_dummy', 'type') group by termtext having count(termtext) > 0  order by tagcount desc"
                    />
                </call>
            </output>
        </service>

        <!--  delete temp graphic files -->
        <service name="stat.deleteTmpGraphics">
            <output sheet="statistics/delete-tmp-graphics.xsl">
                <call name="deleteTmpGraphics" class=".services.statistics.DeleteTmpGraphics"/>
            </output>
        </service>
        
<!--
select count(*) as cnt, termtext 
from params 
where termfield not in ('_locale', '_isTemplate', 'type', '_groupOwner')
and termfield not like '_op%'
group by termtext order by cnt desc
-->    
    </services>
</geonet>
