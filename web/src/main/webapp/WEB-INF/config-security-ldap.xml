<?xml version="1.0" encoding="UTF-8"?>
<beans 
xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.1.xsd" 
          xmlns:sec="http://www.springframework.org/schema/security"
          xmlns:ctx="http://www.springframework.org/schema/context"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns="http://www.springframework.org/schema/beans">
          
    <ctx:property-override location="WEB-INF/config-security-overrides.properties"/>

	<!-- Add ldap authentication to authentication manager -->
	<bean id="ldapAuthenticationProviderPostProcessor"
		class="jeeves.config.springutil.AddAuthenticationProviderPostProcessor">
		<constructor-arg ref="ldapAuthProvider"/>
	</bean>
	
	
    <!-- LDAP configuration-->
    <bean id="contextSource"
        class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
        <constructor-arg value="${ldap.base.provider.url}/${ldap.base.dn}"/>
        <!-- For non anonymous binding -->
        <property name="userDn" value="${ldap.security.principal}"/>
        <property name="password" value="${ldap.security.credentials}"/>
    </bean>
    
    <bean id="ldapAuthProvider"
        class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
        <constructor-arg>
            <!--
                A PasswordComparisonAuthenticator
            <bean class="org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator">
                <constructor-arg ref="contextSource"/>
                <property name="userDnPatterns">
                    <list><value>${ldap.base.dn.pattern}</value></list>
                </property>
                <property name="passwordAttributeName" value="userPassword"/>
                <property name="passwordEncoder">
                   <!- - <bean class="org.springframework.security.authentication.encoding.PlaintextPasswordEncoder"/>- ->
                    <bean class="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                </property>
            </bean>
        -->
        <bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
                <constructor-arg ref="contextSource"/>
                <property name="userDnPatterns">
                    <list><value>${ldap.base.dn.pattern}</value></list>
                </property>
        </bean>
        </constructor-arg>
        <property name="userDetailsContextMapper" ref="ldapUserContextMapper" />
    </bean>
    
    
    
    
    
    <!-- User information retrieval could be defined in 3 ways by configuration. Only one could be defined
         for an LDAP provider.                                                                             -->
    
    <!-- Get all user information from the LDAP user's attributes (including profile and groups)           -->
    <bean id="ldapUserContextMapper" class="org.fao.geonet.kernel.security.ldap.LDAPUserDetailsContextMapper">
        <property name="mapping">
            <map/>
        </property>
        <property name="profileMapping">
            <map/>
        </property>
        <property name="importPrivilegesFromLdap" value="${ldap.privilege.import}"/>
        <property name="createNonExistingLdapGroup" value="${ldap.privilege.create.nonexisting.groups}" />
        <property name="contextSource" ref="contextSource" />
    </bean>
    
    
    <!-- Get all user information from the LDAP user's attributes (including profile and groups) 
    where profile and groups are stored in one attribute. A custom pattern is defined to extract 
    those information. -->
    <!--<bean id="ldapUserContextMapper" class="org.fao.geonet.kernel.security.ldap.LDAPUserDetailsContextMapperWithPattern">
        <property name="mapping">
            <map/>
        </property>
        <property name="profileMapping">
            <map/>
        </property>
        <property name="importPrivilegesFromLdap" value="${ldap.privilege.import}"/>
        <property name="createNonExistingLdapGroup" value="${ldap.privilege.create.nonexisting.groups}" />
        
        <property name="privilegePattern" value="${ldap.privilege.pattern}" />
        <property name="groupIndexInPattern" value="${ldap.privilege.pattern.idx.group}"/>
        <property name="profilIndexInPattern" value="${ldap.privilege.pattern.idx.profil}"/>
        
        <property name="contextSource" ref="contextSource" />
    </bean>-->
    
    <!-- Get all user information from the LDAP user's attributes excluding profiles and groups
        which are searched in another LDAP location. For profiles and groups, define the search
        location and the extraction pattern. -->
    <!--<bean id="ldapUserContextMapper" class="org.fao.geonet.kernel.security.ldap.LDAPUserDetailsContextMapperWithProfileSearch">
        <property name="mapping">
            <map/>
         </property>
        <property name="profileMapping">
            <map/>
        </property>
        <property name="importPrivilegesFromLdap" value="${ldap.privilege.import}"/>
        <property name="createNonExistingLdapGroup" value="${ldap.privilege.create.nonexisting.groups}" />
        
        <property name="groupAttribute" value="${ldap.privilege.search.group.attribute}"/>
        <property name="groupObject" value="${ldap.privilege.search.group.object}"/>
        <property name="groupQuery" value="${ldap.privilege.search.group.query}"/>
        <property name="groupQueryPattern" value="${ldap.privilege.search.group.pattern}"/>
        
        <property name="privilegeAttribute" value="${ldap.privilege.search.privilege.attribute}"/>
        <property name="privilegeObject" value="${ldap.privilege.search.privilege.object}"/>
        <property name="privilegeQuery" value="${ldap.privilege.search.privilege.query}"/>
        <property name="privilegeQueryPattern" value="${ldap.privilege.search.privilege.pattern}"/>
        
        <property name="contextSource" ref="contextSource" />
    </bean>-->
    
    
    
    
    <bean id="scheduler"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
    </bean>
    
    <bean name="ldapSynchronizer" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.fao.geonet.kernel.security.ldap.LDAPSynchronizerJob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="contextSource" value-ref="contextSource" />
                <entry key="ldapUserSearchBase" value="${ldap.sync.user.search.base}" />
                <entry key="ldapUserSearchFilter" value="${ldap.sync.user.search.filter}" />
                <entry key="ldapUserSearchAttribute" value="${ldap.sync.user.search.attribute}" />
                
                <entry key="createNonExistingLdapGroup" value="${ldap.privilege.create.nonexisting.groups}"/>
                <entry key="ldapGroupSearchBase" value="${ldap.sync.group.search.base}" />
                <entry key="ldapGroupSearchFilter" value="${ldap.sync.group.search.filter}" />
                <entry key="ldapGroupSearchAttribute" value="${ldap.sync.group.search.attribute}" />
                <entry key="ldapGroupSearchPattern" value="${ldap.sync.group.search.pattern}" />
                
            </map>
        </property>
    </bean>
    
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="ldapSynchronizer" />
        <property name="cronExpression" value="${ldap.sync.cron}" />
        <property name="startDelay" value="${ldap.sync.startDelay}"/>
    </bean>
    
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory">
            <bean class="org.fao.geonet.util.spring.AutowiringSpringBeanJobFactory"/>
        </property>
        <property name="triggers">
            <list>
                <ref bean="cronTrigger" />
            </list>
        </property>
    </bean>

</beans>