<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<beans
  xmlns:sec="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd


          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.2.xsd"
  xmlns="http://www.springframework.org/schema/beans">

  <alias name="filterChainProxy" alias="springSecurityFilterChain"/>

  <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
    <constructor-arg>
      <list>
        <sec:filter-chain pattern="/srv/swagger-resources/**" filters=""/>
        <sec:filter-chain pattern="/srv/v2/**" filters=""/>

        <!-- TODO: This needs to be secured to not access private info -->
        <sec:filter-chain pattern="/index/**" filters=""/>

        <sec:filter-chain pattern="/dashboards/**" filters=""/>

        <sec:filter-chain pattern="/doc/**" filters=""/>
        <!-- wroAPI is protected for admin only
        This is causing issue on node-change-warning page.
        <sec:filter-chain pattern="/static/wroAPI" filters=""/>-->
        <sec:filter-chain pattern="/static/**" filters=""/>
        <sec:filter-chain pattern="/catalog/**" filters=""/>
        <sec:filter-chain pattern="/test/**" filters=""/>
        <sec:filter-chain pattern="/" filters=""/>
        <sec:filter-chain pattern="/*.html" filters=""/>
        <sec:filter-chain pattern="/*.jsp" filters=""/>
        <sec:filter-chain pattern="/*.css" filters=""/>
        <sec:filter-chain pattern="/images/**" filters=""/>
        <sec:filter-chain pattern="/map/**" filters=""/>
        <sec:filter-chain pattern="/htmlcache/**" filters=""/>
        <sec:filter-chain pattern="/pdf/**" filters=""/>
        <sec:filter-chain pattern="/loc/**" filters=""/>
        <sec:filter-chain pattern="/xml/csw/test/*" filters=""/>
        <sec:filter-chain pattern="/xml/schemas/**" filters=""/>
        <sec:filter-chain pattern="/xsl/harvesting/**" filters=""/>
        <sec:filter-chain pattern="/xsl/ownership/**" filters=""/>
        <ref bean="coreFilterChain"/>
        <!-- <sec:filter-chain pattern="/**" filters="securityContextPersistenceFilter,
                logoutFilter,
                formLoginFilter,
               basicAuthenticationFilter,
                requestCacheFilter,
                anonymousFilter,
                sessionMgmtFilter,
               exceptionTranslationFilter,
               filterSecurityInterceptor" /> -->
      </list>
    </constructor-arg>
  </bean>


  <bean id="coreFilterChain" class="org.springframework.security.web.DefaultSecurityFilterChain">
    <constructor-arg>
      <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="/**"/>
      </bean>
    </constructor-arg>
    <constructor-arg>
      <ref bean="filterChainFilters"/>
    </constructor-arg>
  </bean>
  <bean id="filterChainFilters" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <ref bean="securityContextPersistenceFilter"/>
        <!-- To disable csrf security (not recommended) comment the following line -->
        <ref bean="csrfFilter" />
        <!-- To disable csrf security (not recommended) comment the upper line -->
        <ref bean="logoutFilter"/>
        <!-- A filter that check if an external service already authenticated user
                     (default implementation does nothing but can be overridden) -->
        <ref bean="multiNodeAuthenticationFilter"/>
        <ref bean="preAuthenticationFilter"/>
        <ref bean="basicAuthenticationFilter"/>
        <ref bean="formLoginFilter"/>
        <ref bean="requestCacheFilter"/>
        <ref bean="anonymousFilter"/>
        <ref bean="sessionMgmtFilter"/>
        <ref bean="exceptionTranslationFilter"/>
        <ref bean="filterSecurityInterceptor"/>
      </list>
    </constructor-arg>
  </bean>
  <!-- A filter that check if an external service already authenticated user
                     (default implementation does nothing but can be overridden) -->
  <bean id="multiNodeAuthenticationFilter"
        class="jeeves.config.springutil.MultiNodeAuthenticationFilter">
    <property name="location" value="${wrongNodeRedirectURL}"/>
  </bean>
  <bean id="preAuthenticationFilter" class="jeeves.config.springutil.PassthroughFilter"/>
  <bean id="securityContextPersistenceFilter"
        class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
    <!-- repo -->
    <constructor-arg ref="securityContextRepository"/>
  </bean>

  <bean id="authenticationManager"
        class="org.springframework.security.authentication.ProviderManager">
    <constructor-arg>
      <!-- providers -->
      <list>
        <!-- Check if the preAuthenticationFilter has already authenticated user -->
        <ref bean="preFilterAuthenticationProvider"/>
        <ref bean="geonetworkAuthenticationProvider"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="securityContextRepository"
        class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'>
    <property name="allowSessionCreation" value="true"/>
  </bean>

  <bean class="org.fao.geonet.web.GeoNetworkHttpSessionRequestCache" id="requestCache">
    <property name="allowedUrlsPatterns">
      <set>
        <value>/[a-zA-Z0-9_\-]+/[a-z]{2,3}/catalog.*</value>
        <value>/[a-zA-Z0-9_\-]+/[a-z]{2,3}/admin.console</value>
      </set>
    </property>
  </bean>

  <bean id="formLoginFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
    <property name="postOnly" value="true"/>
    <property name="usernameParameter" value="username"/>
    <property name="passwordParameter" value="password"/>
    <property name="authenticationManager" ref="authenticationManager"/>
    <!--<property name="filterProcessesUrl" value="/signin"/>-->
    <property name="requiresAuthenticationRequestMatcher">
      <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg name="pattern" value="/signin"/>
      </bean>
    </property>
    <property name="authenticationDetailsSource" ref="authenticationDetailsSource"/>
    <property name="authenticationFailureHandler">
      <bean
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <constructor-arg value="${loginErrorForm}"></constructor-arg>
        <property name="redirectStrategy">
          <bean class="jeeves.config.springutil.JeevesNodeAwareRedirectStrategy"/>
        </property>
      </bean>
    </property>
    <property name="authenticationSuccessHandler">
      <bean
        class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
        <property name="targetUrlParameter" value="redirectUrl"/>
        <property name="requestCache" ref="requestCache" />
      </bean>
    </property>
    <property name="sessionAuthenticationStrategy">
      <bean
        class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>
    </property>
  </bean>

  <bean id="basicAuthenticationFilter"
        class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
    <constructor-arg index="0" ref="authenticationManager"/>
    <constructor-arg index="1" ref="basicAuthenticationEntryPoint"/>
    <property name="authenticationDetailsSource" ref="authenticationDetailsSource"/>
  </bean>

  <bean id="authenticationDetailsSource"
        class="jeeves.config.springutil.JeevesAuthenticationDetailSource"/>

  <bean id="basicAuthenticationEntryPoint"
        class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
    <property name="realmName" value="Geonetwork"/>
  </bean>

  <bean id="logoutFilter"
        class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <constructor-arg ref="logoutSuccessHandler"/>
    <constructor-arg>
      <list>
        <bean
          class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        <bean
          class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
          <constructor-arg>
            <array>
              <value>JSESSIONID</value>
            </array>
          </constructor-arg>
        </bean>
      </list>
    </constructor-arg>
    <property name="filterProcessesUrl" value="/signout"/>
  </bean>

  <bean id="logoutSuccessHandler"
        class="jeeves.config.springutil.JeevesNodeAwareLogoutSuccessHandler">
    <property name="defaultTargetUrl" value="${logout.success.url}"></property>
  </bean>
  <bean id="requestCacheFilter"
        class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter"/>

  <bean id="exceptionTranslationFilter"
        class="org.springframework.security.web.access.ExceptionTranslationFilter">
    <constructor-arg index="0" ref="authenticationEntryPoint"/>
    <property name="accessDeniedHandler" ref="accessDeniedHandler"/>
    <property name="requestCache" ref="requestCache" />
  </bean>

  <bean id="defaultAuthenticationEntryPoint"
        class="jeeves.config.springutil.JeevesNodeAwareLoginUrlEntryPoint">
    <constructor-arg name="loginFormUrl" value="${loginForm}"/>
  </bean>

  <bean id="ajaxEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

  <bean id="authenticationEntryPoint"
        class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
    <constructor-arg>
      <map>
        <entry key-ref="apiRequestMatcher" value-ref="ajaxEntryPoint"/>
      </map>
    </constructor-arg>
    <property name="defaultEntryPoint" ref="defaultAuthenticationEntryPoint" />
  </bean>
  <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher" id="apiRequestMatcher">
    <constructor-arg name="pattern" value="/*/api/**" />
  </bean>

  <bean id="accessDeniedHandler"
        class="jeeves.config.springutil.JeevesAccessDeniedHandler">
    <property name="errorPage" value="/accessDenied.jsp"/>
    <property name="onlyStatusResponsePages" value="/*/api/**" />
  </bean>

  <!-- TODO remember me.
      <bean id="rememberMeFilter"
          class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
          <property name="rememberMeServices" ref="rememberMeServices" />
          <property name="authenticationManager" ref="authenticationManager" />
      </bean>

      <bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
          <property name="userDetailsService" ref="myUserDetailsService" />
          <property name="key" value="rememberGeonetwork" />
      </bean>

      <bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.rememberme.RememberMeAuthenticationProvider">
          <property name="key" value="rememberGeonetwork" />
      </bean>
       -->
  <!-- TODO session management -->

  <!-- Note: the id is critical since other components of the system will look up the encoder by its id -->
  <bean class="org.springframework.security.crypto.password.StandardPasswordEncoder"
        id="geonetworkEncoder">
    <constructor-arg value="${passwordSalt}"/>
  </bean>

  <bean class="org.fao.geonet.kernel.security.GeonetworkAuthenticationProvider"
        id="geonetworkAuthenticationProvider">
    <property name="checkUserNameOrEmail" value="true"/>
  </bean>

  <!-- Check if the preAuthenticationFilter has already authenticated user -->
  <bean
    class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider"
    id="preFilterAuthenticationProvider">
    <property name="preAuthenticatedUserDetailsService">
      <bean id="preAuthenticatedUserDetailsService"
            class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
        <property name="userDetailsService" ref="geonetworkAuthenticationProvider"/>
      </bean>
    </property>
  </bean>


  <bean id="roleHierarchy"
        class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
    <property name="hierarchy">
      <value>
        Administrator > UserAdmin
        UserAdmin > Reviewer
        Reviewer > Editor
        Editor > RegisteredUser
        RegisteredUser > Guest
      </value>
    </property>
  </bean>

  <bean id="accessDecisionManager"
        class="org.springframework.security.access.vote.AffirmativeBased">
    <constructor-arg>
      <!-- decisionVoters -->
      <list>
        <bean class="org.springframework.security.access.vote.RoleHierarchyVoter">
          <constructor-arg ref="roleHierarchy"/>
        </bean>
        <bean class="org.springframework.security.access.vote.RoleVoter"/>
        <bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
        <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="anonymousUser" class="org.springframework.security.core.userdetails.memory.UserAttribute">
    <property name="password" value="anonymousUser"/>
    <property name="authoritiesAsString" value ="ROLE_ANONYMOUS"/>
  </bean>
  <bean id="anonymousFilter"
        class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
    <constructor-arg value="GeonetworkAnonymousUser" />
    <constructor-arg value="#{anonymousUser.password}" />
    <constructor-arg value="#{anonymousUser.authorities}" />
  </bean>

  <bean id="anonymousProvider"
        class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
    <constructor-arg name="key" value="GeonetworkAnonymousUser"/>
  </bean>

  <bean id="sessionMgmtFilter"
        class="org.springframework.security.web.session.SessionManagementFilter">
    <constructor-arg ref="securityContextRepository"/>
  </bean>

  <!-- This bean is here to allow evaluation permissions of the current user by Geonetwork -->
  <bean id="webPrivilegeEvaluatorCore"
        class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
    <constructor-arg ref="filterSecurityInterceptor"/>
  </bean>

  <!-- Listener to log the last login date in the database -->
  <bean class="org.fao.geonet.kernel.security.listener.UpdateTimestampListener"
        id="updateTimestampListener">
  </bean>


  <bean id="csrfFilter" class="org.springframework.security.web.csrf.CsrfFilter">
    <constructor-arg>
      <ref bean="csrfTokenRepository"/>
    </constructor-arg>

    <property name="requireCsrfProtectionMatcher" ref="geonetworkCsrfSecurityRequestMatcher" />
  </bean>

  <bean class="org.fao.geonet.security.web.csrf.CookieCsrfTokenRepository"
        id="csrfTokenRepository">
    <property name="cookieHttpOnly" value="false"/>
  </bean>

  <!-- RequestMatcher to exclude CSRF token from CSW requests -->
  <bean id="geonetworkCsrfSecurityRequestMatcher"
        class="org.fao.geonet.security.web.csrf.GeonetworkCsrfSecurityRequestMatcher">
    <constructor-arg>
      <set>
        <!-- CSW requests -->
        <value>/[a-zA-Z0-9_\-]+/[a-z]{2,3}/csw-publication!?.*</value>
        <value>/[a-zA-Z0-9_\-]+/[a-z]{2,3}/csw-.*</value>
        <value>/[a-zA-Z0-9_\-]+/[a-z]{2,3}/csw!?.*</value>
        <value>/[a-zA-Z0-9_\-]+/[a-z]{2,3}/xml.search!?</value>
      </set>
    </constructor-arg>
  </bean>
</beans>
