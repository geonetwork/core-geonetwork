<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<beans
  xmlns:ctx="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd"
  xmlns="http://www.springframework.org/schema/beans">

  <ctx:property-override location="WEB-INF/config-security/config-security-overrides.properties"/>

  <!-- Add ldap authentication to authentication manager -->
  <bean id="ldapAuthenticationProviderPostProcessor"
        class="jeeves.config.springutil.AddAuthenticationProviderPostProcessor">
    <constructor-arg ref="ldapAuthProvider"/>
  </bean>

  <bean id="ldapUtils" class="org.fao.geonet.kernel.security.ldap.LDAPUtils"/>

  <!-- LDAP configuration-->
  <bean id="contextSource"
        class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
    <constructor-arg value="${ldap.base.provider.url}/${ldap.base.dn}"/>
    <!-- For non anonymous binding -->
    <property name="userDn" value="${ldap.security.principal}"/>
    <property name="password" value="${ldap.security.credentials}"/>
  </bean>

  <bean id="ldapAuthProvider"
        class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
    <constructor-arg>
      <!--
          A PasswordComparisonAuthenticator
      <bean class="org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator">
          <constructor-arg ref="contextSource"/>
          <property name="userDnPatterns">
              <list><value>${ldap.base.dn.pattern}</value></list>
          </property>
          <property name="passwordAttributeName" value="userPassword"/>
          <property name="passwordEncoder">
             <!- - <bean class="org.springframework.security.authentication.encoding.PlaintextPasswordEncoder"/>- ->
              <bean class="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
          </property>
      </bean>
  -->
      <bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
        <constructor-arg ref="contextSource"/>
        <property name="userDnPatterns">
          <list>
            <value>${ldap.base.dn.pattern}</value>
          </list>
        </property>
      </bean>
    </constructor-arg>
    <property name="userDetailsContextMapper" ref="ldapUserContextMapper"/>
  </bean>


  <!-- User information retrieval could be defined in 3 ways by configuration. Only one could be defined
       for an LDAP provider.                                                                             -->

  <!-- Get all user information from the LDAP user's attributes (including profile and groups)           -->
  <bean id="ldapUserContextMapper"
        class="org.fao.geonet.kernel.security.ldap.LDAPUserDetailsContextMapper">
    <property name="mapping">
      <map/>
    </property>
    <property name="profileMapping">
      <map/>
    </property>
    <property name="ldapBaseDn" value="${ldap.base.dn}"/>
    <property name="importPrivilegesFromLdap" value="${ldap.privilege.import}"/>
    <property name="createNonExistingLdapGroup"
              value="${ldap.privilege.create.nonexisting.groups}"/>
    <property name="createNonExistingLdapUser" value="${ldap.privilege.create.nonexisting.users}"/>
    <property name="ldapManager" ref="ldapUserDetailsService"/>
    <property name="contextSource" ref="contextSource"/>
    <property name="ldapUsernameCaseInsensitive" value="${ldap.usernameCaseInsensitive:#{true}}"/>
  </bean>


  <!-- Get all user information from the LDAP user's attributes (including profile and groups)
  where profile and groups are stored in one attribute. A custom pattern is defined to extract
  those information. -->
  <!--<bean id="ldapUserContextMapper" class="org.fao.geonet.kernel.security.ldap.LDAPUserDetailsContextMapperWithPattern">
      <property name="mapping">
          <map/>
      </property>
      <property name="profileMapping">
          <map/>
      </property>
      <property name="importPrivilegesFromLdap" value="${ldap.privilege.import}"/>
      <property name="createNonExistingLdapGroup" value="${ldap.privilege.create.nonexisting.groups}" />
      <property name="createNonExistingLdapUser" value="${ldap.privilege.create.nonexisting.users}" />

      <property name="ldapManager" ref="ldapUserDetailsService" />

      <property name="privilegePattern" value="${ldap.privilege.pattern}" />
      <property name="groupIndexInPattern" value="${ldap.privilege.pattern.idx.group}"/>
      <property name="profilIndexInPattern" value="${ldap.privilege.pattern.idx.profil}"/>

      <property name="contextSource" ref="contextSource" />
  </bean>-->

  <!-- Get all user information from the LDAP user's attributes excluding profiles and groups
      which are searched in another LDAP location. For profiles and groups, define the search
      location and the extraction pattern. -->
  <!--<bean id="ldapUserContextMapper" class="org.fao.geonet.kernel.security.ldap.LDAPUserDetailsContextMapperWithProfileSearch">
      <property name="mapping">
          <map/>
       </property>
      <property name="profileMapping">
          <map/>
      </property>
      <property name="importPrivilegesFromLdap" value="${ldap.privilege.import}"/>
      <property name="createNonExistingLdapGroup" value="${ldap.privilege.create.nonexisting.groups}" />
      <property name="createNonExistingLdapUser" value="${ldap.privilege.create.nonexisting.users}" />

      <property name="ldapManager" ref="ldapUserDetailsService" />

      <property name="groupAttribute" value="${ldap.privilege.search.group.attribute}"/>
      <property name="groupObject" value="${ldap.privilege.search.group.object}"/>
      <property name="groupQuery" value="${ldap.privilege.search.group.query}"/>
      <property name="groupQueryPattern" value="${ldap.privilege.search.group.pattern}"/>

      <property name="privilegeAttribute" value="${ldap.privilege.search.privilege.attribute}"/>
      <property name="privilegeObject" value="${ldap.privilege.search.privilege.object}"/>
      <property name="privilegeQuery" value="${ldap.privilege.search.privilege.query}"/>
      <property name="privilegeQueryPattern" value="${ldap.privilege.search.privilege.pattern}"/>

      <property name="contextSource" ref="contextSource" />
  </bean>-->

  <bean name="ldapSynchronizer" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass" value="org.fao.geonet.kernel.security.ldap.LDAPSynchronizerJob"/>
    <property name="jobDataAsMap">
      <map>
        <entry key="contextSource" value-ref="contextSource"/>
        <entry key="ldapUserSearchBase" value="${ldap.sync.user.search.base}"/>
        <entry key="ldapUserSearchFilter" value="${ldap.sync.user.search.filter}"/>
        <entry key="ldapUserSearchAttribute" value="${ldap.sync.user.search.attribute}"/>

        <entry key="createNonExistingLdapGroup"
               value="${ldap.privilege.create.nonexisting.groups}"/>
        <entry key="ldapGroupSearchBase" value="${ldap.sync.group.search.base}"/>
        <entry key="ldapGroupSearchFilter" value="${ldap.sync.group.search.filter}"/>
        <entry key="ldapGroupSearchAttribute" value="${ldap.sync.group.search.attribute}"/>
        <entry key="ldapGroupSearchPattern" value="${ldap.sync.group.search.pattern}"/>

      </map>
    </property>
  </bean>

  <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail" ref="ldapSynchronizer"/>
    <property name="cronExpression" value="${ldap.sync.cron}"/>
    <property name="startDelay" value="${ldap.sync.startDelay}"/>
  </bean>

  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="jobFactory">
      <bean class="org.fao.geonet.util.spring.AutowiringSpringBeanJobFactory"/>
    </property>
    <property name="triggers">
      <list>
        <ref bean="cronTrigger"/>
      </list>
    </property>
  </bean>

  <bean id="ldapUserDetailsService"
        class="org.fao.geonet.kernel.security.ldap.LdapUserDetailsManager">
    <constructor-arg ref="contextSource"/>
    <constructor-arg name="groupMemberAttributeName"
                     value="${ldap.privilege.search.group.queryprop}"/>
    <constructor-arg name="query"
                     value="${ldap.privilege.search.group.query}"/>
    <property name="groupSearchBase"
              value="${ldap.privilege.search.group.object}"/>
    <property name="usernameMapper" ref="usernameMapper"/>
    <property name="userDetailsMapper" ref="ldapUserContextMapper"/>
  </bean>

  <bean id="usernameMapper"
        class="org.springframework.security.ldap.DefaultLdapUsernameToDnMapper">
    <constructor-arg index="0" type="java.lang.String"
                     name="userDnBase" value="${ldap.base.search.base}"/>
    <constructor-arg index="1" type="java.lang.String"
                     name="usernameAttribute" value="${ldap.sync.user.search.attribute}"/>
  </bean>


  <!-- Uncomment if you want to automatically create groups in LDAP
  when creating groups on geoNetwork. -->
  <!-- <bean class="org.fao.geonet.kernel.security.ldap.AutoCreateGroups">
      <property name="contextSource" ref="contextSource"/>
      Where should groups be stored.
      <property name="baseDn" value="${ldap.privilege.search.group.object}"/>
      Identifier property for groups
      <property name="groupAttribute" value="${ldap.privilege.search.group.attribute}"/>
      Should we create a set of groups to define profiles on LDAP?
      <property name="withProfiles" value="true"/>
      Used only when withProfiles is true. 0 is the profile, 1 is the group name
      <property name="profilePattern" value="{1}_{0}"/>
      Map role names with role identifiers
      <property name="profileMapping">
          <map/>
      </property>
  </bean> -->

  <!-- Uncomment if you want to sync additions in user group relations with LDAP -->
  <!-- <bean class="org.fao.geonet.kernel.security.ldap.AutoUpdateUserGroups">
      <property name="contextSource" ref="contextSource"/>
      Where should groups be stored.
      <property name="baseDn" value="${ldap.privilege.search.group.object}"/>
      Identifier property for groups
      <property name="groupAttribute" value="${ldap.privilege.search.group.attribute}"/>
      Should we create a set of groups to define profiles on LDAP?
      <property name="withProfiles" value="true"/>
      Used only when withProfiles is true. 0 is the profile, 1 is the group name
      <property name="profilePattern" value="{1}_{0}"/>
      Map role names with role identifiers
      <property name="profileMapping">
          <map/>
      </property>
  </bean> -->

  <!-- Uncomment if you want to sync removal in user group relations with LDAP -->
  <!-- <bean class="org.fao.geonet.kernel.security.ldap.AutoUpdateUserGroupsOnRemove">
  <property name="contextSource" ref="contextSource"/>
  Where should groups be stored.
  <property name="baseDn" value="${ldap.privilege.search.group.object}"/>
  Identifier property for groups
  <property name="groupAttribute" value="${ldap.privilege.search.group.attribute}"/>
  Should we create a set of groups to define profiles on LDAP?
  <property name="withProfiles" value="true"/>
  Used only when withProfiles is true. 0 is the profile, 1 is the group name
  <property name="profilePattern" value="{1}_{0}"/>
  Map role names with role identifiers
  <property name="profileMapping">
      <map/>
  </property>
</bean> -->

</beans>
