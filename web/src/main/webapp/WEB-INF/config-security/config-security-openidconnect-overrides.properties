# Copyright (C) 2020 Food and Agriculture Organization of the
# United Nations (FAO-UN), United Nations World Food Programme (WFP)
# and United Nations Environment Programme (UNEP)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
#
# Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
# Rome - Italy. email: geonetwork@osgeo.org


# SETUP
# 1.

#you MUST set these env vars;
#----------------------------
#
# OPENIDCONNECT_CLIENTID   -- client id (from your IDP server)
# OPENIDCONNECT_CLIENTSECRET  -- client secret (from your IDP server)
#
# IDP server metadata configuration is available from your IDP server;
#     keycloak: http://localhost:8080/realms/{realm}/.well-known/openid-configuration
#     azure AD: https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/v2.0/.well-known/openid-configuration
#               where 00000000-0000-0000-0000-000000000000 is the directory (tenant) ID
# OPENIDCONNECT_SERVERMETADATA_FNAME  -- file location for the IDP server metadata file - i.e. /WEB-INF/config-security/openid-configuration.json
# Alternatively, you can put the actual text of the .json file in the environment variable;
#  OPENIDCONNECT_SERVERMETADATA_JSON_TEXT
#  NOTE: if you specify both OPENIDCONNECT_SERVERMETADATA_FNAME and OPENIDCONNECT_SERVERMETADATA_JSON_TEXT
#        then OPENIDCONNECT_SERVERMETADATA_JSON_TEXT will be used!
#
#
# Where in the token your IDP server puts the roles
#     keycloak: resource_access.{client id}.roles
#     azure AD: groups
#        NOTE: for azure AD,
# OPENIDCONNECT_IDTOKENROLELOCATION   -- where to get roles from the token -- resource_access.gn-key.roles


# make sure you IDP will allow redirects to:
# http://localhost:7777/geonetwork/login/oauth2/code/geonetwork-oicd
# (change to match you server's URL)

# Also, make sure you set the location of the roles in the object your IDP Returns
# see OPENIDCONNECT_IDTOKENROLELOCATION

# You might need to do some translation between your IDPs roles and GN's roles
# see OPENIDCONNECT_ROLECONVERTER



# You can modify these if you need to, but usually defaults are ok

# This is for the "group:profile" roles - this defines the separator (":") between group and role.
openidconnectConfiguration.groupPermissionSeparator=${OPENIDCONNECT_GROUPPERMISSIONSEPARATOR:#{':'}}

# See above
openidconnectConfiguration.idTokenRoleLocation=${OPENIDCONNECT_IDTOKENROLELOCATION:roles}

# convert role names from the IDP to Profiles that GN understands
# i.e.
# "GeonetworkAdmin=Administrator,GeonetworkEditor=Editor"
# where GeonetworkAdmin/GeonetworkEditor are roles in the IDP
# and Administrator/Editor are GN roles
#openidconnectConfiguration.roleConverterString=${OPENIDCONNECT_ROLECONVERTER:#{'GeonetworkAdmin=Administrator,GeonetworkEditor=Editor'}}
openidconnectConfiguration.roleConverterString=${OPENIDCONNECT_ROLECONVERTER:#{''}}

# minimum profile that users who are authenticated through the IDP will have.
# Typically, this means that user doesn't have any GN specific roles in the IDP
# recommend: RegisteredUser (or Guest)
openidconnectConfiguration.minimumProfile=${OPENIDCONNECT_MINIMUMPROFILE:RegisteredUser}

#force updating of user and user's profileGroups
openidconnectConfiguration.updateProfile=${OPENIDCONNECT_USERPROFILEUPDATEENABLED:true}
openidconnectConfiguration.updateGroup=${OPENIDCONNECT_USERGROUPUPDATEENABLED:true}

# claim name (from the IDP) that contains the user's organization name
openidconnectConfiguration.organizationProperty=${OPENIDCONNECT_ORGANIZATIONPROPERTY:organization}


openidconnectConfiguration.scopes=${OPENIDCONNECT_SCOPES:#{'openid email profile'}}

openidconnectConfiguration.clientId=${OPENIDCONNECT_CLIENTID}
openidconnectConfiguration.clientSecret=${OPENIDCONNECT_CLIENTSECRET}

openidconnectConfiguration.userNameAttribute=${OPENIDCONNECT_USERNAME_ATTRIBUTE:#{'email'}}

openidconnectConfiguration.loginType=${OPENIDCONNECT_LOGINTYPE:#{'LINK'}}
openidconnectConfiguration.logSensitiveInformation=${OPENIDCONNECT_LOGSENSITIVE_INFO:#{'false'}}
