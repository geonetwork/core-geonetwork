<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<xs:schema xmlns:gns="http://geonetwork-opensource.org/schemas/schema-ident" xmlns:xml="http://www.w3.org/XML/1998/namespace"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           version="1.0"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           targetNamespace="http://geonetwork-opensource.org/schemas/schema-ident">

  <xs:import schemaLocation="xml.xsd" namespace="http://www.w3.org/XML/1998/namespace"/>

  <xs:annotation>
    <xs:documentation>
      XML Schema which can be used to validate GeoNetwork schema-ident.xml
      file used in Schema Plugins.
    </xs:documentation>
  </xs:annotation>

  <!-- ====================================================================== -->
  <!-- schema is the root element in a GeoNetwork schema identification -->
  <!-- ====================================================================== -->

  <xs:element name="schema" type="gns:schemaType"/>

  <!-- ====================================================================== -->
  <!-- schemaType complex type -->
  <!-- ====================================================================== -->

  <xs:complexType name="schemaType">
    <xs:annotation>
      <xs:documentation>
        All schema identity files must have the elements defined in this
        type:

        name = unique name of the schema used in GeoNetwork (lower case,
        and if a profile then it should be named after the base schema
        using base-schema-name.profile-name eg. iso19139.mcp)

        id = unique identifier for the schema

        version = official version number of the schema

        depends = names of other schemas that this schema depends on. This
        schema will fail to load if these schemas are not present.

        schemaLocation = official URL of XML schema definitions (XSD) for this
        metadata schema

        autodetect = information used to detect whether a metadata record
        belongs to this schema
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="1"/>
      <xs:element name="id" type="xs:string" minOccurs="1"/>
      <xs:element name="version" type="xs:string" minOccurs="1"/>
      <xs:element name="appMinorVersionSupported" type="xs:string" minOccurs="1"/>
      <xs:element name="appMajorVersionSupported" type="xs:string" minOccurs="0"/>
      <xs:element name="title" type="gns:title" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="description" type="gns:description" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="standardUrl" type="gns:standardUrl" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="depends" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="schemaLocation" type="xs:string" minOccurs="1"/>
      <xs:element name="autodetect" type="gns:autodetectType"
                  minOccurs="1" maxOccurs="1"/>
      <xs:element name="filters" type="gns:filters" minOccurs="0" maxOccurs="1"/>
      <xs:element name="readwriteUuid" type="xs:boolean" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="title">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute ref="xml:lang"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="description">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute ref="xml:lang"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="standardUrl">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute ref="xml:lang"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <!-- ====================================================================== -->
  <!-- autodetectType complex type -->
  <!-- ====================================================================== -->

  <xs:complexType name="autodetectType">
    <xs:annotation>
      <xs:documentation>
        Define the information used to determine whether a
        metadata record is defined using this schema.
      </xs:documentation>
    </xs:annotation>
    <!-- one and one only rule to detect schemas can be specified -->
    <xs:choice minOccurs="1" maxOccurs="1">
      <xs:element name="elements" type="gns:elementsType"/>
      <xs:element name="attributes" type="gns:attributesType"/>
      <xs:element name="namespaces" type="gns:namespacesType"/>
    </xs:choice>
  </xs:complexType>

  <!-- ====================================================================== -->
  <!-- namespacesType complex type -->
  <!-- ====================================================================== -->

  <xs:simpleType name="namespacesType">
    <xs:annotation>
      <xs:documentation>
        Describes the namespace(s) that must exist in a metadata record for it
        to be identified as belonging to this schema.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token"> <!-- no content allowed -->
      <xs:enumeration value=""/>
    </xs:restriction>
  </xs:simpleType>

  <!-- ====================================================================== -->
  <!-- attributesType complex type -->
  <!-- ====================================================================== -->

  <xs:complexType name="attributesType">
    <xs:annotation>
      <xs:documentation>
        Describes the attribute(s) that must exist in a metadata record for it
        to be identified as belonging to this schema.
      </xs:documentation>
    </xs:annotation>
    <xs:anyAttribute namespace="##any" processContents="skip"/>
  </xs:complexType>

  <!-- ====================================================================== -->
  <!-- elementsType complex type -->
  <!-- ====================================================================== -->

  <xs:complexType name="elementsType">
    <xs:annotation>
      <xs:documentation>
        Contains the elements that must exist in a metadata record for it
        to be identified as belonging to this schema.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:any namespace="##any" processContents="skip" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="type" use="optional">
      <xs:annotation>
        <xs:documentation>
          Determines how the elements specified will be used to detect the
          schema.

          root = the element defined is expected to be the root element

          search = the elements and their content must be present somewhere in
          the record (default if unspecified)
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="root"/>
          <xs:enumeration value="search"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="filters">
    <xs:annotation>
      <xs:documentation>
        Define the filter rules to apply to the
        metadata record using this schema by reserved
        operation.

        A maximum of 3 filters could be defined, one for
        each reserved operation editing, download and dynamic.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="filter" type="gns:filter" minOccurs="1" maxOccurs="3"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="filter">
    <xs:annotation>
      <xs:documentation>A filter define an operation
        to check for the user groups and apply the filter
        defined by the XPath. All elements matching the XPath
        are removed from the record before being returned
        to the user.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="keepMarkedElement" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>An optional element definition to substitute
            the replaced element by (if a match is found this element
            attributes or children are inserted).
            This is used to highlight removed element.
          </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:any namespace="##any" processContents="skip" minOccurs="0" maxOccurs="1"/>
          </xs:sequence>
          <xs:anyAttribute namespace="##any" processContents="skip"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="xpath" use="required">
      <xs:annotation>
        <xs:documentation>
          An XPath to select elements to filter. Does not support version 2.0 functions like matches.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ifNotOperation" use="required">
      <xs:annotation>
        <xs:documentation>
          An operation (which match canEdit, canDownload, canDynamic method in AccessManager)
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="editing"/>
          <xs:enumeration value="download"/>
          <xs:enumeration value="dynamic"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
</xs:schema>
