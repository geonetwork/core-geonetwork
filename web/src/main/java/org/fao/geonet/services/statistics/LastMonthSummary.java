package org.fao.geonet.services.statistics;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.concurrent.TimeUnit;

import jeeves.interfaces.Service;
import jeeves.resources.dbms.Dbms;
import jeeves.server.ServiceConfig;
import jeeves.server.context.ServiceContext;
import jeeves.utils.Log;
import jeeves.utils.Xml;

import org.fao.geonet.constants.Geonet;
import org.fao.geonet.services.NotInReadOnlyModeService;
import org.jdom.Element;

/**
 * Service to get the db-stored requests information summary during last month
 * @author nicolas Ribot
 *
 */
public class LastMonthSummary extends NotInReadOnlyModeService{
	private SimpleDateFormat dateFormat;
	
	//--------------------------------------------------------------------------
	//---
	//--- Init
	//---
	//--------------------------------------------------------------------------

	public void init(String appPath, ServiceConfig params) throws Exception	{
        super.init(appPath, params);
		dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
	}

	//--------------------------------------------------------------------------
	//---
	//--- Service
	//---
	//--------------------------------------------------------------------------
    @Override
	public Element serviceSpecificExec(Element params, ServiceContext context) throws Exception {
        boolean readOnlyMode = super.exec(params, context) == null;
        if(readOnlyMode) {
            return null;
        }
		// computes date range
		Date d = new Date();
		Calendar calendar = new GregorianCalendar();
		calendar.add(Calendar.MONTH,-1);		
		Calendar now = Calendar.getInstance();
		String monthAgo = dateFormat.format(calendar.getTime());
		long numberOfDay = TimeUnit.SECONDS.convert(now.getTimeInMillis()- calendar.getTimeInMillis(), TimeUnit.MILLISECONDS) / (24*3600);
		//System.out.println("month ago: " + monthAgo + " number of days: " + numberOfDay);
		
		Dbms dbms = (Dbms) context.getResourceManager().open(Geonet.Res.MAIN_DB);

		//also contains total number of hits
		//String query = "select count(*) as totalcount, nohit from requests a, (select count(*) as nohit from requests where hits=0) as b where requestdate >'";
        String  query = "select a.totalcnt as totalcount, b.noreq as nohit from (select count(*) as ";
        query += "totalcnt from requests where requestdate > ?";
				query += " and autogenerated = 0";
        query += ") as a, (select count(*) as noreq from requests where hits=0 and requestdate > ?";
				query += " and autogenerated = 0";
				query += ") as b";

        if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
            Log.debug(Geonet.SEARCH_LOGGER, "query to get total searches: " + query);
		
		Element noHitsElement = dbms.select(query, monthAgo, monthAgo);
		//System.out.println("record: " + Xml.getString(noHitsElement));
		int totalCount = Integer.parseInt(noHitsElement.getChild("record").getChildText("totalcount"));
        if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
            Log.debug(Geonet.SEARCH_LOGGER, "count, number of days in this month: " + totalCount + ", " + numberOfDay);
		
		Element meanSearchElement = new Element("meanSearchLastMonth").setText("" + Math.round((double)totalCount/(double)numberOfDay));
		
		// autogenerated searches (guiservices)
		query = "select count(*) as cnt from requests ";
		query += " where requestdate > ?";
		query += " and autogenerated = 1";
        if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
            Log.debug(Geonet.SEARCH_LOGGER, "query to get autogenerated searches: " + query);
		Element dbElement = dbms.select(query, monthAgo);
		//System.out.println("record: " + Xml.getString(dbElement));
		int autogeneratedCount = Integer.parseInt(dbElement.getChild("record").getChildText("cnt"));
		Element autogeneratedElement = new Element("autogenerated").setText(autogeneratedCount+"");

		// simple/advanced searches
		query = "select simple, count(*) as cnt from requests ";
		query += " where requestdate > ?";
		query += " and autogenerated = 0";
		query += " group by simple order by simple";
        if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
            Log.debug(Geonet.SEARCH_LOGGER, "query to get simple/advanced search: " + query);
		// only 2 results maximum for this query, first is advanced, second is simple
		List resultSet = dbms.select(query, monthAgo).getChildren();
		if (resultSet.size() > 2) {
            if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
                Log.debug(Geonet.SEARCH_LOGGER, "Invalid number of results for requests.simple: " + resultSet.size() +
                        ". a serious problem must have occured on the DB...");
		}
        // fixme: heavy code to deal with one or two results in the SQL
		Element advancedSearchElement = new Element("advanced").setText("0");
		Element simpleSearchElement = new Element("simple").setText("0");
		Element autogeneratedSearchElement = new Element("autogenerated").setText("0");

        if (resultSet.size() == 1) {
            // only one result, must set the right one
            if (((Element)resultSet.get(0)).getChildText("simple").equals("0")) {
                advancedSearchElement.setText(((Element)resultSet.get(0)).getChildText("cnt"));
            } else {
                simpleSearchElement.setText(((Element)resultSet.get(0)).getChildText("cnt"));

            }
        } else if (resultSet.size() == 2) {
            advancedSearchElement.setText(((Element)resultSet.get(0)).getChildText("cnt"));
            simpleSearchElement.setText(((Element)resultSet.get(1)).getChildText("cnt"));
        }

		// search by MD type (service MD, data MD, geodata, all)
		Element mdTypeElement = new Element("mdType");
		query = "select count(type) as typecount, type from requests where requestdate > ?";
		query += " and autogenerated = 0 group by type order by typecount DESC";
		mdTypeElement.setContent(dbms.select(query, monthAgo));
        if(Log.isDebugEnabled(Geonet.SEARCH_LOGGER))
            Log.debug(Geonet.SEARCH_LOGGER, "query to get MD types: " + query);

		noHitsElement.addContent(autogeneratedElement);
		noHitsElement.addContent(meanSearchElement);
		noHitsElement.addContent(advancedSearchElement);
		noHitsElement.addContent(simpleSearchElement);
		noHitsElement.addContent(mdTypeElement);
		
		System.out.println("response: " + Xml.getString(noHitsElement));

		return noHitsElement;
	}
}
