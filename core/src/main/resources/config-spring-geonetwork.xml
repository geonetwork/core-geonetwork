<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<beans
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    ">

  <context:property-placeholder location="${app.properties}"
                                file-encoding="UTF-8"
                                ignore-unresolvable="true" />

  <context:annotation-config/>
  <bean id="ProfileManager" class="jeeves.component.ProfileManager" lazy-init="true"/>
  <bean id="MonitorManager" class="jeeves.monitor.MonitorManager" lazy-init="true"/>
  <bean id="JeevesEngine" class="jeeves.server.JeevesEngine" lazy-init="true"/>
  <bean id="ServiceManager" class="jeeves.server.dispatchers.ServiceManager" lazy-init="true"/>
  <bean id="XmlCacheManager" class="jeeves.server.dispatchers.guiservices.XmlCacheManager"
        lazy-init="true"/>
  <bean id="ServiceInfo" class="jeeves.server.dispatchers.ServiceInfo" scope="prototype"/>


  <bean id="AccessManager" class="org.fao.geonet.kernel.AccessManager" lazy-init="true"/>
  <bean id="DataManager" class="org.fao.geonet.kernel.DataManager" lazy-init="true"/>
  <bean id="GeonetworkDataDirectory" class="org.fao.geonet.kernel.GeonetworkDataDirectory"
        lazy-init="true"/>

  <bean id="luceneConfig" class="org.fao.geonet.kernel.search.LuceneConfig" lazy-init="true">
    <constructor-arg ref="facets"/>
    <constructor-arg ref="summaryTypes"/>
  </bean>

  <bean id="translatorFactory" class="org.fao.geonet.kernel.search.TranslatorFactory"/>

  <bean id="SearchManager" class="org.fao.geonet.kernel.search.SearchManager" lazy-init="true"/>
  <bean id="SearchLogger" class="org.fao.geonet.kernel.search.log.SearcherLogger" lazy-init="true"/>
  <bean id="EsSearchManager" class="org.fao.geonet.kernel.search.EsSearchManager" lazy-init="true"/>
  <bean id="LuceneIndexLanguageTracker"
        class="org.fao.geonet.kernel.search.index.LuceneIndexLanguageTracker" lazy-init="true"/>
  <bean id="HarvesterSettingsManager" class="org.fao.geonet.kernel.setting.HarvesterSettingsManager"
        lazy-init="true"/>
  <bean id="SettingInfo" class="org.fao.geonet.kernel.setting.SettingInfo" lazy-init="true"/>
  <bean id="SettingManager" class="org.fao.geonet.kernel.setting.SettingManager" lazy-init="true"/>
  <bean id="MetadataNotifierManager" class="org.fao.geonet.notifier.MetadataNotifierManager"
        lazy-init="true"/>
  <bean id="IsoLanguagesMapper" class="org.fao.geonet.languages.IsoLanguagesMapper"
        lazy-init="true"/>
  <bean id="selectionManager" class="org.fao.geonet.kernel.SelectionManager" lazy-init="true"/>
  <bean id="TranslatorCache" class="org.fao.geonet.kernel.search.TranslatorCache" lazy-init="false"
        scope="singleton"/>
  <bean id="schematronValidator" class="org.fao.geonet.kernel.SchematronValidator" lazy-init="false"
        scope="singleton"/>


  <!-- List of records to index in a moment ...-->
  <bean id="indexingList"
        class="org.fao.geonet.kernel.search.index.IndexingList"/>


  <!-- Task indexing indexingList content -->
  <bean name="indexingTaskJob"
        class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass"
              value="org.fao.geonet.kernel.search.index.IndexingTask"/>
  </bean>

  <!-- Scheduling of the indexing task -->
  <bean id="indexingTaskTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail" ref="indexingTaskJob"/>
    <property name="cronExpression" value="0/30 * * * * ?"/>
    <property name="startDelay" value="60000"/>
  </bean>



  <!-- Task notifying user watching records -->
  <bean name="watchListNotificationTaskJob"
        class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="jobClass"
              value="org.fao.geonet.kernel.WatchListNotifier"/>
  </bean>

  <!-- Scheduling of the notification task -->
  <bean id="watchListNotificationTaskTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail" ref="watchListNotificationTaskJob"/>
    <property name="cronExpression" value="${usersavedselection.watchlist.frequency}"/>
    <property name="startDelay" value="60000"/>
  </bean>



  <bean id="gnBackgroundJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="schedulerName" value="gnBackgroundJobScheduler"/>
    <property name="jobFactory">
      <bean class="org.fao.geonet.util.spring.AutowiringSpringBeanJobFactory"/>
    </property>
    <property name="triggers">
      <list>
        <ref bean="indexingTaskTrigger"/>
        <ref bean="watchListNotificationTaskTrigger"/>
        <ref bean="backupMetadataCronTrigger" />
      </list>
    </property>
    <property name="quartzProperties">
      <props>
        <prop key="org.quartz.scheduler.instanceName">default.geonetwork.indexingtask</prop>
        <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
        <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
        <prop key="org.quartz.threadPool.threadCount">1</prop>
      </props>
    </property>
  </bean>

  <bean id="SearchLoggerTask"
        class="org.fao.geonet.kernel.search.SearchLoggerTask"
        lazy-init="true"
        scope="prototype"/>

  <bean id="MetadataNotifierTask"
        class="org.fao.geonet.notifier.MetadataNotifierTask"
        lazy-init="true" scope="prototype"/>

  <bean id="MetadataNotifierClient"
        class="org.fao.geonet.notifier.MetadataNotifierClient"
        lazy-init="true" scope="prototype"/>

  <bean id="backupMetadataCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail">
      <bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="org.fao.geonet.kernel.backup.ArchiveAllMetadataJob"/>
        <property name="name" value="archiveAllMetadata" />
        <property name="group" value="gnBackgroundTasks" />
      </bean>
    </property>
    <property name="cronExpression" value="0 0 6 ? * *" />
  </bean>


    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataIndexer"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataManager"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataValidator"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataUtils"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataOperations"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataStatus"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataSchemaUtils"/>
    <bean class="org.fao.geonet.kernel.datamanager.base.BaseMetadataCategory"/>

  <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false"/>

</beans>
