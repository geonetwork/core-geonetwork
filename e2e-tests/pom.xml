<?xml version="1.0"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.geonetwork-opensource</groupId>
    <artifactId>geonetwork</artifactId>
    <version>3.5.0-SNAPSHOT</version>
  </parent>
  <artifactId>e2e-tests</artifactId>
  <packaging>pom</packaging>
  <name>GeoNetwork E2E Javascript Tests</name>
  <description>GeoNetwork integration test suite.</description>
  <licenses>
    <license>
      <name>General Public License (GPL)</name>
      <url>http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>


  <properties>
    <browserName>firefox</browserName>
    <protractorConfig>${basedir}/target/protractor</protractorConfig>
    <seleniumJar>to be calculated by groovy plugin</seleniumJar>
    <baseProtractorConfig>// ----- How to setup Selenium -----
      //
      // There are three ways to specify how to use Selenium. Specify one of the
      // following:
      //
      // 1. seleniumServerJar - to start Selenium Standalone locally.
      // 2. seleniumAddress - to connect to a Selenium server which is already
      // running.
      // 3. sauceUser/sauceKey - to use remote Selenium servers via SauceLabs.

      // The location of the selenium standalone server .jar file.
      seleniumServerJar: '@seleniumJar@',

      // Chromedriver location is used to help the selenium standalone server
      // find chromedriver.
      //
      // The binaries are in the chromedriver submodule and the correct driver
      // is selected by the maven profile activated by the current platform
      chromeDriver: '@chromedriver@',

      // than the maximum time your application needs to stabilize between tasks.
      allScriptsTimeout: 11000,

      // ----- Capabilities to be passed to the webdriver instance ----
      //
      // For a full list of available capabilities, see
      // https://code.google.com/p/selenium/wiki/DesiredCapabilities
      // and
      // https://code.google.com/p/selenium/source/browse/javascript/webdriver/capabilities.js
      capabilities: {
      'browserName': '@browserName@'
      // Config for phantomjs is not working
      // 'browserName': 'phantomjs',
      // 'phantomjs.binary.path': './node_modules/phantomjs/bin/phantomjs'
      },

      // ----- More information for your tests ----
      //
      // A base URL for your application under test. Calls to protractor.get()
      // with relative paths will be prepended with this.
      baseUrl: 'http://localhost:${appPort}/geonetwork/srv/eng/',

      // ----- Options to be passed to minijasminenode -----
      //
      // See the full list at https://github.com/juliemr/minijasminenode
      jasmineNodeOpts: {
      // onComplete will be called just before the driver quits.
      onComplete: null,
      // If true, display spec names.
      isVerbose: false,
      // If true, print colors to the terminal.
      showColors: false,
      // If true, include stack traces in failures.
      includeStackTrace: true,
      // Default time to wait in ms before a test fails.
      defaultTimeoutInterval: 30000
      }
    </baseProtractorConfig>

    <appPort>8844</appPort>
    <sslAppPort>8843</sslAppPort>
    <jetty.stop.port>8012</jetty.stop.port>
    <geonetworkWar>${project.build.directory}/geonetworkWar</geonetworkWar>
  </properties>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${project.basedir}</directory>
              <includes>
                <include>*.db</include>
                <include>jcs_caching/**</include>
                <include>logs/**</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>e2eTests</id>
      <!--Disable e2e test to have
      travis build working. Another option
      would have been to have phantomjs
      browser running.
      <activation>
          <property>
              <name>!skipTests</name>
          </property>
      </activation>-->
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>protractor-config-first-copy</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <delimiters>
                    <delimiter>${*}</delimiter>
                  </delimiters>
                  <outputDirectory>${project.build.outputDirectory}/combinedProtractorTemplate
                  </outputDirectory>
                  <resources>
                    <resource>
                      <directory>protractorConfig</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>protractor-config-second-copy</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <delimiters/>
                  <outputDirectory>${protractorConfig}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${project.build.outputDirectory}/combinedProtractorTemplate
                      </directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <version>1.6</version>

            <executions>
              <execution>
                <id>install node and npm</id>
                <goals>
                  <goal>install-node-and-npm</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <nodeVersion>${node.version}</nodeVersion>
                  <npmVersion>${npm.version}</npmVersion>
                </configuration>
              </execution>

              <execution>
                <id>npm download modules</id>
                <goals>
                  <goal>npm</goal>
                </goals>
                <phase>generate-resources</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version>
            <executions>
              <execution>
                <id>run_protractor_admin_tests</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <executable>${project.basedir}/node/node</executable>
                  <arguments>
                    <argument>${project.basedir}/node_modules/protractor/lib/cli.js</argument>
                    <argument>${protractorConfig}/test-admin-cfg.js</argument>
                  </arguments>
                  <workingDirectory>${project.basedir}</workingDirectory>
                  <!--<environmentVariables>-->
                  <!--<webdriver.ie.driver>${basedir}/chromedriver/win64/IEDriverServer.exe</webdriver.ie.driver>-->
                  <!--</environmentVariables>-->
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>groovy-maven-plugin</artifactId>
            <version>2.0</version>
            <executions>
              <execution>
                <!-- Obtain the selenium jar name by searching the node_modules directory for the jar.
                     This allows us to update the package.json without worrying about the selenium jar version number
                     changing -->
                <id>Find Selenium Jar</id>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>process-test-resources</phase>
                <configuration>
                  <source><![CDATA[
                    import static groovy.io.FileType.*

                    def base = new File(project.basedir, "node_modules/selenium-server/lib")
                    log.info("\n\tSearching $base for selenium server jar")
                    def jarsFound = []
                    base.eachFileRecurse FILES, { file ->
                      if (file.name.startsWith("selenium-server-standalone")) {
                        jarsFound << file
                      }
                    }

                    if (jarsFound.isEmpty()) {
                      throw new AssertionError("No selenium jar found in $base")
                    }

                    project.properties['seleniumJar'] = jarsFound[0].absolutePath
                    log.info("\n\tUsing selenium jar: " + jarsFound[0])
                    ]]></source>
                </configuration>
              </execution>
              <execution>
                <!--
    On windows sometimes (when a build fails) files stay locked and the
    geonetwork won't start correctly because of this, causing the tests to fail
    This detects locked datadir and assigns a new one for the test run. -->
                <id>Create Test Data Directory</id>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <source><![CDATA[
                    def datadirIndex = 0;
                    println(project.build.outputDirectory)
                    def rootDataDir = new File(project.build.outputDirectory, 'datadir')
                    rootDataDir.deleteDir()
                    if (rootDataDir.exists()) {
                      boolean found = true;
                      while (found) {
                        datadirIndex++;
                        found = new File(rootDataDir, "$datadirIndex").exists()
                      }
                    }
                    def datadir = new File(rootDataDir, "$datadirIndex")
                    datadir.mkdirs();
                    log.info("\n\n\tSetting DataDirectory to e2e tests to: $datadir")
                    System.setProperty("geonetwork.dir", datadir.absolutePath)

                    // Also set system property so that Geonetwork knows to shutdown in case of error.
                    // This provision makes it easier to tell when the failure is with Geonetwork start up or
                    // with e2e-tests or selenium configuration
                    System.setProperty("geonetwork.shutdown.on.startup.error", "true");

                    // edit the configuration so that the h2 database is created in the workspace (so it is correctly cleaned up after runs)
                    def overridesFile = new File(datadir, 'e2e-tests-overrides.xml')
                    overridesFile.withWriter { writer ->
                      def xml = new groovy.xml.MarkupBuilder(writer)
                      xml.overrides {
                        spring {
                          set(bean: "jdbcDataSource", property: "Url", value: "jdbc:h2:${datadir.path}/e2egeonetwork;LOCK_TIMEOUT=20000;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE")
                        }
                      }
                    }
                    System.setProperty('geonetwork.jeeves.configuration.overrides.file', overridesFile.absolutePath)
                    ]]></source>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>2.4</version>
            <executions>
              <execution>
                <id>copy-geonetwork-war</id>
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>web-app</artifactId>
                  <version>${project.version}</version>
                  <type>war</type>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${geonetworkWar}</outputDirectory>
              <silent>true</silent>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <configuration>
              <contextXml>${project.basedir}/../web/jetty-context.xml</contextXml>
              <connectors>
                <connector implementation="org.eclipse.jetty.server.bio.SocketConnector">
                  <port>${appPort}</port>
                  <maxIdleTime>60000</maxIdleTime>
                  <requestHeaderSize>20000</requestHeaderSize>
                </connector>
                <connector implementation="org.eclipse.jetty.server.ssl.SslSocketConnector">
                  <port>${sslAppPort}</port>
                  <keystore>${project.basedir}/../web/keystore.jks</keystore>
                  <password>password</password>
                  <keyPassword>password</keyPassword>
                  <truststore>${project.basedir}/../web/keystore.jks</truststore>
                  <trustPassword>password</trustPassword>
                  <maxIdleTime>60000</maxIdleTime>
                  <requestHeaderSize>20000</requestHeaderSize>
                </connector>
              </connectors>
              <war>${geonetworkWar}</war>
              <webAppConfig>
                <contextPath>/geonetwork</contextPath>
              </webAppConfig>
              <stopKey>GEONETWORK_E2E_TEST_STOP</stopKey>
              <stopPort>${jetty.stop.port}</stopPort>
            </configuration>
            <executions>
              <execution>
                <id>start-jetty</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run-exploded</goal>
                </goals>
                <configuration>
                  <scanIntervalSeconds>0</scanIntervalSeconds>
                  <daemon>true</daemon>
                </configuration>
              </execution>
              <execution>
                <id>stop-jetty</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <browserName>chrome</browserName>
        <chromedriver>${basedir}/chromedriver/win32/chromedriver.exe</chromedriver>
      </properties>
    </profile>
    <profile>
      <id>linux32</id>
      <activation>
        <os>
          <family>linux</family>
          <arch>x86</arch>
        </os>
      </activation>
      <properties>
        <browserName>firefox</browserName>
        <chromedriver>${basedir}/chromedriver/linux32/chromedrivere</chromedriver>
      </properties>
    </profile>
    <profile>
      <id>linuxAmd64</id>
      <activation>
        <os>
          <family>linux</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <browserName>firefox</browserName>
        <chromedriver>${basedir}/chromedriver/linux64/chromedriver</chromedriver>
      </properties>
    </profile>
    <profile>
      <id>linux64_64</id>
      <activation>
        <os>
          <family>linux</family>
          <arch>x86_64</arch>
        </os>
      </activation>
      <properties>
        <browserName>firefox</browserName>
        <chromedriver>${basedir}/chromedriver/linux64/chromedriver</chromedriver>
      </properties>
    </profile>
    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <browserName>safari</browserName>
        <chromedriver>${basedir}/chromedriver/mac32/chromedriver</chromedriver>
      </properties>
    </profile>
    <profile>
      <id>chrome</id>
      <properties>
        <browserName>chrome</browserName>
      </properties>
    </profile>
    <profile>
      <id>ie</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <!--<browserName>internet explorer</browserName>-->
        <browserName>chrome</browserName>
      </properties>
    </profile>
    <profile>
      <id>safari</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <browserName>safari</browserName>
      </properties>
    </profile>
  </profiles>
</project>
