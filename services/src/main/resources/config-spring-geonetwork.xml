<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<beans xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans" xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
    ">

  <context:property-placeholder location="${app.properties}"
                                file-encoding="UTF-8"
                                ignore-unresolvable="true" />

  <context:component-scan base-package="org.fao.geonet"/>

  <bean id="defaultLanguage" class="java.lang.String">
    <constructor-arg index="0" value="\${language.default}"/>
  </bean>

  <bean id="languageUtils" class="org.fao.geonet.api.tools.i18n.LanguageUtils">
    <constructor-arg index="0" ref="languages"/>
    <constructor-arg index="1" ref="defaultLanguage"/>
  </bean>

  <bean id="RegionsDAO" class="org.fao.geonet.services.region.ThesaurusBasedRegionsDAO">
    <constructor-arg ref="languages"/>
    <property name="cacheAllRegionsInMemory" value="true"/>
    <property name="thesaurusName" value="external.place.regions"/>
  </bean>
  <bean id="MetadataRegionsDAO" class="org.fao.geonet.services.region.MetadataRegionDAO">
    <property name="cacheAllRegionsInMemory" value="false"/>
  </bean>

  <bean id="resourceUploadHandler"
        class="org.fao.geonet.services.resources.handlers.DefaultResourceUploadHandler"/>

  <bean id="resourceDownloadHandler"
        class="org.fao.geonet.services.resources.handlers.DefaultResourceDownloadHandler"/>

  <bean id="resourceRemoveHandler"
        class="org.fao.geonet.services.resources.handlers.DefaultResourceRemoveHandler"/>

  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="100000000"/>
  </bean>

  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
      <map>
        <entry key="org.fao.geonet.domain.MetadataResourceVisibility"
               value="org.fao.geonet.domain.MetadataResourceVisibilityConverter"/>
        <entry key="org.fao.geonet.api.records.attachments.Sort"
               value="org.fao.geonet.api.records.attachments.SortConverter"/>
      </map>
    </property>
  </bean>
  <bean id="filesystemStore"
        class="org.fao.geonet.api.records.attachments.FilesystemStore"/>
  <bean id="resourceStore"
        class="org.fao.geonet.api.records.attachments.ResourceLoggerStore">
    <constructor-arg index="0" ref="filesystemStore"/>
  </bean>
  <!--<bean id="resourcesApi"
        class="org.fao.geonet.api.metadata.resources.ResourcesApi"/>-->

  <bean id="formatterCache" lazy-init="true"
        class="org.fao.geonet.api.records.formatters.cache.FormatterCache">
    <constructor-arg index="0" ref="fsStore"/>
    <constructor-arg index="1" value="500"/>
    <constructor-arg index="2" value="5000"/>
  </bean>
  <bean id="fsStore" class="org.fao.geonet.api.records.formatters.cache.FilesystemStore"
        lazy-init="true">
    <property name="maxSizeGb" value="500"/>
  </bean>
  <bean id="formatterCacheConfig"
        class="org.fao.geonet.api.records.formatters.cache.ConfigurableCacheConfig"
        lazy-init="true">
    <!--This class allows you to configure which formatters, languages, content/type etc... to cache-->
    <!--Simply add the properties.  -->
    <!--By default everything is cached except pdf-->
    <property name="formatterExceptions">
      <set>
        <value>hierarchy_view</value>
      </set>
    </property>
  </bean>
  <bean id="formatterCachePublishListener"
        class="org.fao.geonet.api.records.formatters.cache.FormatterCachePublishListener"/>
  <bean id="formatterCacheDeletionListener"
        class="org.fao.geonet.api.records.formatters.cache.FormatterCacheDeletionListener"/>

  <bean id="processingReportRegistry"
        class="org.fao.geonet.api.processing.report.registry.ProcessingReportRegistry"/>

  <bean id="apiMessages" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="org.fao.geonet.api.Messages" />
    <property name="useCodeAsDefaultMessage" value="true" />
  </bean>

  <bean id="SpringLocalServiceInvoker" class="org.fao.geonet.kernel.SpringLocalServiceInvoker"
        init-method="init">
  </bean>
  
  <bean id="cssStyleSettingService" class="org.fao.geonet.api.cssstyle.service.CssStyleSettingDatabaseService">
  </bean>

  <bean id="userFeedbackService" class="org.fao.geonet.api.userfeedback.service.UserFeedbackDatabaseService" />

</beans>
