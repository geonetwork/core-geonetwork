<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<beans xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans" xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

  <context:property-placeholder location="${app.properties}"
                                file-encoding="UTF-8"
                                ignore-unresolvable="true" />
  <context:component-scan base-package="org.fao.geonet.api"/>
  <context:component-scan base-package="org.fao.geonet.guiapi"/>
  <context:component-scan base-package="org.fao.geonet.guiservices"/>
  <context:component-scan base-package="org.fao.geonet.services"/>

  <bean id="defaultLanguage" class="java.lang.String">
    <constructor-arg index="0" value="\${language.default}"/>
  </bean>

  <bean id="languageUtils" class="org.fao.geonet.api.tools.i18n.LanguageUtils">
    <constructor-arg index="0" ref="languages"/>
    <constructor-arg index="1" ref="defaultLanguage"/>
  </bean>

  <!--
   Configure here what the publish/unpublish action does.
   By default, it set view, download and dynamic operation
   to Internet and Intranet group.
   -->
  <util:map id="publicationConfig"
            key-type="java.lang.String"
            value-type="java.lang.String[]">
    <!-- INTERNET GROUP -->
    <entry key="1">
      <array>
        <!-- View, download, dynamic -->
        <value>view</value>
        <value>download</value>
        <value>dynamic</value>
      </array>
    </entry>
    <!-- INTRANET GROUP -->
    <entry key="0">
      <array>
        <value>view</value>
        <value>download</value>
        <value>dynamic</value>
      </array>
    </entry>
  </util:map>

  <bean id="RegionsDAO" class="org.fao.geonet.api.regions.ThesaurusBasedRegionsDAO">
    <constructor-arg ref="languages"/>
    <property name="cacheAllRegionsInMemory" value="true"/>
    <property name="thesaurusName" value="external.place.regions"/>
  </bean>

  <bean id="MetadataRegionsDAO" class="org.fao.geonet.api.regions.MetadataRegionDAO">
    <property name="cacheAllRegionsInMemory" value="false"/>
  </bean>

  <bean id="InspireValidatorUtils"
        class="org.fao.geonet.api.records.editing.InspireValidatorUtils"
        scope="singleton">
    <property name="testsuites">
      <map>
        <entry key="TG version 1.3">
          <array>
            <value>Conformance class: INSPIRE Profile based on EN ISO 19115 and EN ISO 19119</value>
            <value>Conformance class: XML encoding of ISO 19115/19119 metadata</value>
            <value>Conformance class: Conformance class: Metadata for interoperability</value>
          </array>
        </entry>
        <entry key="TG version 2.0 - Data sets and series">
          <array>
            <value>Common Requirements for ISO/TC 19139:2007 based INSPIRE metadata records.</value>
            <value>Conformance Class 1: INSPIRE data sets and data set series baseline metadata.</value>
            <value>Conformance Class 2: INSPIRE data sets and data set series interoperability metadata.</value>
          </array>
        </entry>
        <entry key="TG version 2.0 - Network services">
          <array>
            <value>Common Requirements for ISO/TC 19139:2007 based INSPIRE metadata records.</value>
            <!--<value>Conformance Class 1: INSPIRE data sets and data set series baseline metadata.</value>
            <value>Conformance Class 2: INSPIRE data sets and data set series interoperability metadata.</value>-->
            <value>Conformance Class 3: INSPIRE Spatial Data Service baseline metadata.</value>
            <value>Conformance Class 4: INSPIRE Network Services metadata.</value>
            <!--<value>Conformance Class 5: INSPIRE Invocable Spatial Data Services metadata.</value>
            <value>Conformance Class 6: INSPIRE Interoperable Spatial Data Services metadata.</value>
            <value>Conformance Class 7: INSPIRE Harmonised Spatial Data Services metadata.</value>-->
          </array>
        </entry>
      </map>
    </property>
    <!--
      key format:

      SCHEMAID::TG_RULE_NAME

      If a metadata schema doesn't match, the schema dependency hierarchy
      is checked to verify if any parent schema matches any rules.
    -->
    <property name="testsuitesConditions">
      <map>
        <entry key="iso19139::TG version 2.0 - Data sets and series" value="gmd:hierarchyLevel[*/@codeListValue = 'dataset' or */@codeListValue = 'series']" />
        <entry key="iso19139::TG version 2.0 - Network services" value=".//srv:SV_ServiceIdentification" />
        <entry key="iso19115-3.2018::TG version 2.0 - Data sets and series" value="mdb:metadataScope[*/mdb:resourceScope/*/@codeListValue = 'dataset' or */mdb:resourceScope/*/@codeListValue = 'series']" />
        <entry key="iso19115-3.2018::TG version 2.0 - Network services" value=".//srv:SV_ServiceIdentification" />
      </map>
    </property>
    <property name="defaultTestSuite" value="TG version 1.3"/>
    <!-- ETF validator provides a service to check if a validation task has finished.
         The following parameters allow to configure:

          - Max. number of checks to do before throwing an Exception, to avoid waiting forever
            if any issue with the ETF validator returning the task as pending while any error happened.

          - Interval to wait until do a new check, in milliseconds.
    -->
    <property name="maxNumberOfEtfChecks" value="20"/>
    <property name="intervalBetweenEtfChecks" value="5000"/>
  </bean>

  <bean id="resourceUploadHandler"
        class="org.fao.geonet.services.resources.handlers.DefaultResourceUploadHandler"/>

  <bean id="resourceDownloadHandler"
        class="org.fao.geonet.services.resources.handlers.DefaultResourceDownloadHandler"/>

  <bean id="resourceRemoveHandler"
        class="org.fao.geonet.services.resources.handlers.DefaultResourceRemoveHandler"/>

  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="100000000"/>
  </bean>

  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
      <map>
        <entry key="org.fao.geonet.domain.MetadataResourceVisibility"
               value="org.fao.geonet.domain.MetadataResourceVisibilityConverter"/>
        <entry key="org.fao.geonet.api.records.attachments.Sort"
               value="org.fao.geonet.api.records.attachments.SortConverter"/>
      </map>
    </property>
  </bean>
  <!--<bean id="resourcesApi"
        class="org.fao.geonet.api.metadata.resources.ResourcesApi"/>-->

  <bean id="formatterCache" lazy-init="true"
        class="org.fao.geonet.api.records.formatters.cache.FormatterCache">
    <constructor-arg index="0" ref="fsStore"/>
    <constructor-arg index="1" value="500"/>
    <constructor-arg index="2" value="5000"/>
  </bean>
  <bean id="fsStore" class="org.fao.geonet.api.records.formatters.cache.FilesystemStore"
        lazy-init="true">
    <property name="maxSizeGb" value="500"/>
  </bean>
  <bean id="formatterCacheConfig"
        class="org.fao.geonet.api.records.formatters.cache.ConfigurableCacheConfig"
        lazy-init="true">
    <!--This class allows you to configure which formatters, languages, content/type etc... to cache-->
    <!--Simply add the properties.  -->
    <!--By default everything is cached except pdf-->
    <property name="formatterExceptions">
      <set>
        <value>hierarchy_view</value>
      </set>
    </property>
  </bean>
  <bean id="formatterCachePublishListener"
        class="org.fao.geonet.api.records.formatters.cache.FormatterCachePublishListener"/>
  <bean id="formatterCacheDeletionListener"
        class="org.fao.geonet.api.records.formatters.cache.FormatterCacheDeletionListener"/>

  <bean id="processingReportRegistry"
        class="org.fao.geonet.api.processing.report.registry.ProcessingReportRegistry"/>

  <bean id="apiMessages" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="org.fao.geonet.api.Messages" />
    <property name="useCodeAsDefaultMessage" value="true" />
  </bean>

  <bean id="SpringLocalServiceInvoker" class="org.fao.geonet.kernel.SpringLocalServiceInvoker"
        init-method="init">
  </bean>

  <bean id="cssStyleSettingService" class="org.fao.geonet.api.cssstyle.service.CssStyleSettingDatabaseService">
  </bean>

  <bean id="userFeedbackService" class="org.fao.geonet.api.userfeedback.service.UserFeedbackDatabaseService" />

</beans>
