<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="editor">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
A metadata editor configuration is defined for a specific schema plugin standard
(see :ref:`implementing-a-schema-plugin`).

The editor configuration defined the navigation menu (ie. list of views and tabs)
for the editor, the list of fields and the type of control to use. Controls could
be HTML type (eg. text, date) or more advanced control build using
`AngularJS directive <https://docs.angularjs.org/guide/directive>`_.


To build such an editor configuration user needs to know the XSD of the standard
to properly build views, tabs and fields according to element names
(see :code:`schemas/config-editor.xsd`). Create an editor root element and
attach:

- the schema and

- namespaces for the standards


.. code-block:: xml

    <editor xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="../../../../../../config-editor.xsd"
      xmlns:gn="http://www.fao.org/geonetwork"
      xmlns:gco="http://www.isotc211.org/2005/gco"
      xmlns:gmd="http://www.isotc211.org/2005/gmd"
      xmlns:gmx="http://www.isotc211.org/2005/gmx"
      xmlns:srv="http://www.isotc211.org/2005/srv"
      xmlns:gml="http://www.opengis.net/gml"
      xmlns:xlink="http://www.w3.org/1999/xlink">


An editor configuration should define first some general element description and then
a set of views with at least one.


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="1" ref="fields"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="fieldsWithFieldset"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="fieldsWithAnchorOption"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="multilingualFields"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="tableFields"/>
        <xs:element minOccurs="1" maxOccurs="1" ref="views"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="batchEditing"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="fields">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Defining field type
-------------------

Define the form fields type configuration. Default is simple text input.
This list contains the list of exception which does not use a simple text input.
The list of possible values are:

- all HTML5 input type or

- an AngularJS directive name. MUST starts with 'data-' and
  could end with '-textarea' to create a textarea element.
  It could end with '-div' if the directive does not apply
  to the input or textarea but to the div containing it.


An element can only have one type defined.


.. code-block:: xml

    <editor>
     <fields>
       <for name="gmd:abstract" use="textarea"/>
       <for name="gco:Real" use="number"/>
       <for name="gco:Boolean" use="checkbox"/>
       <for name="gco:Date" use="data-gn-date-picker"/>


The other option to define a more advanced field type is to catch the element using
and XSL template. This approach is used for keywords in ISO19139 for example
(see :code:`schemas/iso19139/src/main/plugin/iso19139/layout/layout-custom-fields-keywords.xsl`).


        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="for" minOccurs="1" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
    <xs:unique name="uniqueForElementName">
      <xs:selector xpath="for"/>
      <xs:field xpath="@name"/>
    </xs:unique>
  </xs:element>

  <xs:element name="fieldsWithFieldset">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[

Grouping element from the standards
-----------------------------------

List of element to be displayed in a fieldset (ie. boxed element). Those
elements usually contain children elements and define major section in the
standard. For example, in ISO19139, identification and distribution are major
section and should usually be displayed as a group of information.

.. code-block:: xml

    <editor>
       <fields>...</fields>
       <fieldsWithFieldset>
        <name>gmd:identificationInfo</name>
        <name>gmd:distributionInfo</name>


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="name"/>
      </xs:sequence>
    </xs:complexType>
    <xs:unique name="uniqueFieldswithFieldset">
      <xs:selector xpath="name"/>
      <xs:field xpath="."/>
    </xs:unique>
  </xs:element>

  <xs:element name="fieldsWithAnchorOption">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[

Defining elements to display a replacement selection for CharacterString or Anchor
----------------------------------------------------------------------------------

List of element to display a replacement selection for CharacterString or Anchor
when adding them to the editor.

.. code-block:: xml

    <editor>
       <fields>...</fields>
       <fieldsWithFieldset>...</fieldsWithFieldset>
       <fieldsWithAnchorOption>
        <name>gfc::code</name>

        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="name"/>
      </xs:sequence>
    </xs:complexType>
    <xs:unique name="uniqueFieldsWithAnchorOption">
      <xs:selector xpath="name"/>
      <xs:field xpath="."/>
    </xs:unique>
  </xs:element>

  <xs:element name="multilingualFields">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Defining multilingual fields
----------------------------

Configure here the list of multilingual fields for a standard.

By default, if the standard as multilingual support like ISO19139, all fields will be displayed
as multilingual fields. Define in the exclude section the exception (eg. gmd:identifier for example in ISO19139).

Then this section also allows to define how multilingual fields are displayed using the expanded elements.
If expanded, then one field per language is displayed with no need to click on the language switcher.

.. figure:: ../../user-guide/describing-information/img/multilingual-editing.png



.. code-block:: xml


    <editor>
       <fields>...</fields>
       <fieldsWithFieldset>...</fieldsWithFieldset>
        <multilingualFields>
          <expanded>
            <name>gmd:title</name>
            <name>gmd:abstract</name>
          </expanded>
          <exclude>
            <name>gmd:identifier</name>
            <name>gmd:metadataStandardName</name>


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="1" ref="expanded"/>
        <xs:element maxOccurs="1" ref="exclude"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="tableFields">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Defining fields to display as tables
------------------------------------

Configure here the list of fields to display using a table. This only applies to flat mode views.

.. figure:: ../../user-guide/describing-information/img/table-fields.png


.. code-block:: xml


    <editor>
       <fields>...</fields>
       <fieldsWithFieldset>...</fieldsWithFieldset>
        <multilingualFields>...</multilingualFields>
        <tableFields>
          <table for="gmd:CI_OnlineResource">
            <header>
              <hcol label="gmd:protocol"/>
              <hcol label="gmd:linkage"/>
              <hcol label="gmd:name"/>
              <hcol/>
            </header>
            <row>
              <col xpath="gmd:protocol"/>
              <col xpath="gmd:linkage"/>
              <col xpath="gmd:name"/>
              <col del=".."/>
            </row>
          </table>



Tables can also contains subforms.

Configuration is defined in the table config with a section element pointing to the element to add as a new row. In the following example, service operation are displayed in a table:

* with 3 columns: operation name, DCP and connect point.

* if parameters are defined, one subrow will be created per parameters

* and if srv:parameters is in flatModeException, and extra row will be added to allow to add new parameters for the operation

.. code-block:: xml

    <table for="srv:SV_OperationMetadata">
      <header>
        <col label="srv:operationName"/>
        <col label="srv:DCP"/>
        <col label="srv:connectPoint"/>
        <col/>
      </header>
      <row>
        <col xpath="srv:operationName"/>
        <col xpath="srv:DCP"/>
        <col xpath="srv:connectPoint/gmd:CI_OnlineResource/gmd:linkage"/>
        <col del=".."/>
        <section xpath="srv:SV_OperationMetadata/srv:parameters"
                 or="parameters" in="srv:SV_OperationMetadata"/>
      </row>
    </table>

        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="table">
          <xs:complexType>
            <xs:attribute name="for" use="required">
              <xs:annotation>
                <xs:documentation>
                  <![CDATA[
Element to match for creating the table.
                  ]]>
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:sequence>
              <xs:element maxOccurs="1" ref="header"/>
              <xs:element maxOccurs="1" ref="row"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="header">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Table header row.
        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" name="col">
          <xs:complexType>
            <xs:attribute name="label" type="xs:string"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="row">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Table column.
        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" name="col">
          <xs:complexType>
            <xs:attribute name="xpath" type="xs:string" use="optional"/>
            <xs:attribute name="del" type="xs:string" use="optional"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="1" ref="section"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="expanded">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
In multilingual mode, define which mode the widget should have. If expanded, then one field per
language is displayed below each other. If not, then a button for each language allows to
switch from one language to another.
        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="exclude">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
All fields in ISO could be multilingual. Define element to exclude. TODO: it may be
relevant to have parent defined to have more control over the list.
        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="name" minOccurs="1" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              <![CDATA[
        The element name including its namespace prefix (eg.
        gmd:identificationInfo).
        ]]>
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="parent" type="xs:string" use="optional">
              <xs:annotation>
                <xs:documentation>
                  <![CDATA[
          The parent element name including its namespace prefix (eg.
          gmd:identificationInfo).
          ]]>
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ancestor" type="xs:string" use="optional">
              <xs:annotation>
                <xs:documentation>
                  <![CDATA[
          One of the element ancestors name including its namespace prefix (eg.
          gmd:identificationInfo).
          ]]>
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="child" type="xs:string" use="optional">
            <xs:annotation>
              <xs:documentation>
                <![CDATA[
          The first child name including its namespace prefix (eg.
          gmd:identificationInfo).
          ]]>
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="name" type="xs:string">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
        The element name including its namespace prefix (eg.
        gmd:identificationInfo).
        ]]>
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="for">
    <xs:annotation>
      <xs:documentation>A field configuration.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="directiveAttributes" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>
            <![CDATA[
        The element name including its namespace prefix (eg.
        gmd:identificationInfo).
        ]]>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="use"/>
      <xs:attribute ref="addDirective"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="views">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Configuring views
-----------------

At least one view MUST be defined but more view modes can be defined depending on the needs.

By default ISO19139 define 3 views (ie. default, advanced, xml) and one disabled (ie. INSPIRE).
See :code:`schemas/iso19139/src/main/plugin/iso19139/layout/config-editor.xml` for the configuration.

.. figure:: ../../user-guide/describing-information/img/view-mode.png

Another basic example is the Dublin Core view (see :code:`schemas/dublin-core/src/main/plugin/dublin-core/layout/config-editor.xml`).

To create a new view, use the following:

.. code-block:: xml


      <views>
          <view name="viewNameInLocalizationFile">
            ...
          </view>

        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="view"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="view">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Defining a view
---------------

A view has a label and define a specific rendering of the metadata records.
A view is composed of one or more tabs.

.. code-block:: xml


      <views>
          <view name="custom-view">
              ....
          </view>


The view could be displayed or not according to the metadata record content or
the current user session using the displayIfRecord and displayIfServiceInfo attribute.

        ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="1" ref="sidePanel"/>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="tab">
          <xs:annotation>
            <xs:documentation><![CDATA[
              A tab is composed of a set of elements.
              ]]></xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="1" ref="flatModeExceptions"/>
        <xs:element minOccurs="0" maxOccurs="1" ref="thesaurusList"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
The key of the view name stored in ``{schema}/loc/{lang}/strings.xml`` or the element name with namespace prefix.

.. code-block:: xml

      <strings>
        <default>Simple</default>
        <inspire>INSPIRE</inspire>
        <custom-view>My view</custom-view>


            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="disabled" type="xs:boolean" fixed="true">
        <xs:annotation>
          <xs:documentation><![CDATA[
Hide the view from the menu if the attribute is defined. Allows to easily disable a view.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="upAndDownControlHidden" type="xs:boolean" fixed="true">
        <xs:annotation>
          <xs:documentation><![CDATA[
Define if up and down control should be displayed in that view. If not defined, controls are displayed.
Hide those controls in a view to make it easier with less controls for the end-user.

.. figure:: ../../user-guide/describing-information/img/editor-control-updown.png


            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>

      <xs:attribute name="displayAttributes" type="xs:boolean" fixed="true">
        <xs:annotation>
          <xs:documentation><![CDATA[
Display attributes by default when loading the view.
]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>

      <xs:attribute name="displayTooltips" type="xs:boolean" fixed="true">
        <xs:annotation>
          <xs:documentation><![CDATA[
Display help documentation for all elements by default when loading the view.
]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="displayTooltipsMode" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
Display help documentation onhover elements (default) or by clicking on an icon.
]]></xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="icon"/>
            <xs:enumeration value="onhover"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>

      <xs:attribute ref="displayIfRecord"/>
      <xs:attribute ref="displayIfServiceInfo"/>
      <xs:attribute name="hideTimeInCalendar" type="xs:boolean" fixed="true">
        <xs:annotation>
          <xs:documentation><![CDATA[
Define if calendar control should allows users to set date only or
datetime. If attribute is not set, then date and time can be set. This is controlled at the view level,
switching to another view may allow more control over the dates.

]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
    <xs:unique name="uniqueTabName">
      <xs:selector xpath="tab"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:element name="sidePanel">
    <xs:annotation>
      <xs:documentation><![CDATA[

Defining the side panel configuration
-------------------------------------

The side panel can be composed of text element or directives.

A good default config with all directives is:

.. code-block:: xml

      <sidePanel>
        <directive gn-geo-publisher=""
                   data-ng-if="gnCurrentEdit.geoPublisherConfig"
                   data-config="{{gnCurrentEdit.geoPublisherConfig}}"
                   data-lang="lang"/>
        <directive data-gn-validation-report=""/>
        <directive data-gn-suggestion-list=""/>
        <directive data-gn-need-help="user-guide/describing-information/creating-metadata.html"/>
        <directive data-gn-onlinesrc-list=""
                   types="thumbnail|onlinesrc|parent|dataset|service|source|sibling|associated|fcats"/>
      </sidePanel>


To include text block use the following:


.. code-block:: xml

      <sidePanel>
        <text ref="defaultviewdesc"></text>
        ....



]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="text"/>
        <xs:element ref="directive"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>



  <xs:element name="tab">
    <xs:annotation>
      <xs:documentation><![CDATA[

Defining a tab
--------------

A view contains at least one tab. In that case it will be the default to display and no
top toolbar will be displayed to switch from one tab to another.

.. figure:: ../../user-guide/describing-information/img/editor-tab-switcher.png

Add custom view one default tab and a field for the title:

.. code-block:: xml

      <views>
        <view name="custom-view">
          <tab id="custom-tab" default="true">
            <section>
              <field xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:citation/*/gmd:title"/>
            </section>
          </tab>
        </view>



        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="text"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="directive"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="section">
          <xs:annotation>
            <xs:documentation><![CDATA[
For each section a fieldset is created.
              ]]></xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:attribute name="default" type="xs:boolean" fixed="true">
        <xs:annotation>
          <xs:documentation><![CDATA[
Define if this tab is the default one for the view. Only one tab should be the default in a view.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
The tab key used in URL parameter to activate that tab. The key is also use for the tab label as defined in ``{schema}/loc/{lang}/strings.xml``.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="mode"/>
      <xs:attribute ref="displayIfRecord"/>
      <xs:attribute ref="displayIfServiceInfo"/>
      <xs:attribute name="toggle" fixed="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[
Define if the tab should be displayed in a drop down menu instead of a tab. This is used for advanced
section which is not used often by the end-user. More than one tab could be grouped in that drop down tab menu.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="formatter-order" type="xs:int">
        <xs:annotation>
          <xs:documentation><![CDATA[
Define the ordering index of this tab in the XSLT formatter (Note used for editor).
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name="flatModeExceptions">
    <xs:annotation>
      <xs:documentation><![CDATA[
Configuring complex element display
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Elements to apply "flat" mode exceptions. By default,
"flat" mode does not display elements containing only children and no value.

Use or and in attribute to display non existing element.
To display gmd:descriptiveKeywords element even if does not exist in the metadata
record or if the field should be displayed to add new occurrences:

.. code-block:: xml

      <field
            xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:descriptiveKeywords/*/gmd:keyword"
            or="keyword"
            in="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:descriptiveKeywords/*"/>
   </tab>

   <!-- Elements that should not use the "flat" mode -->
   <flatModeExceptions>
     <for name="gmd:descriptiveKeywords" />
   </flatModeExceptions>
 </view>


]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="for"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="thesaurusList">
    <xs:annotation>
      <xs:documentation><![CDATA[
Customizing thesaurus
~~~~~~~~~~~~~~~~~~~~~

To configure the type of transformations
or the number of keyword allowed or if the widget
has to be displayed in a fieldset or as simple field for e
thesaurus define a specific configuration:

eg. only 2 INSPIRE themes.


.. code-block:: xml

      <thesaurusList>
        <thesaurus key="external.theme.httpinspireeceuropaeutheme-theme"
                   maxtags="2"
                   fieldset="false"
                   transformations=""/>
      </thesaurusList>


      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="thesaurus" minOccurs="1" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="key" type="xs:string" use="required"/>
            <xs:attribute name="maxtags" type="xs:integer" use="optional"/>
            <xs:attribute name="orderById" type="xs:boolean" use="optional"/>
            <xs:attribute name="fieldset" type="xs:string" use="optional" fixed="false"/>
            <xs:attribute name="transformations" type="xs:string" use="optional"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:attribute name="mode" fixed="flat" type="xs:string">
    <xs:annotation>
      <xs:documentation><![CDATA[
The "flat" mode is an important concept to understand for the editor. It controls the way:

 - complex elements are displayed (ie. elements having children) and

 - non existing elements are displayed (ie. elements in the standard not in the current document).


When a tab is in flat mode, this tab will not display element which are not in the current metadata
document and it will display complex element as a group only if defined in the list of
element with fieldset (see :ref:`creating-custom-editor-fieldsWithFieldset`).

Example for a contact in non "flat" mode:


.. figure:: ../../user-guide/describing-information/img/editor-contact-nonflatmode.png


Example for a contact in "flat" mode:


.. figure:: ../../user-guide/describing-information/img/editor-contact-flatmode.png


This mode makes the layout simpler but does not provide all controls to remove
some of the usually boxed element. End-user can still move  to the advanced view mode
to access those hidden elements in flat mode.

It's recommended to preserve at least one view in non "flat" mode for reviewer or administrator in order
to be able:

 - to build proper templates based on the standards

 - to fix any types of errors.


        ]]></xs:documentation>
    </xs:annotation>
  </xs:attribute>

  <xs:element name="section">
    <xs:annotation>
      <xs:documentation><![CDATA[
Adding a section to a tab
-------------------------

A section is a group of fields. If a name attribute is provided,
then it will create an HTML fieldset which is collapsible.
If no name attribute is provided, then it just render the inner elements.
For example, if you need a tab without a root fieldset, juste create 
the mandatory section with no name and then the inner elements.


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="field">
          <xs:annotation>
            <xs:documentation>A form field to insert in the section (if the section match no
              XPath).
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="action"/>
        <xs:element ref="directive"/>
        <xs:element ref="text"/>
        <xs:element ref="xsl"/>
        <xs:element ref="section"/>
        <xs:element ref="fieldset"/>
      </xs:choice>
      <xs:attribute ref="mode"/>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>An optional name to override the default one base on field name for the
            section. The name must be defined in ``{schema}/loc/{lang}/strings.xml``.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="xpath" type="xs:string">
        <xs:annotation>
          <xs:documentation>The xpath of the element to match. If an XPath is set for a section, it
            should not contains any field.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="or"/>
      <xs:attribute ref="in"/>
      <xs:attribute ref="displayIfRecord"/>
    </xs:complexType>
    <xs:unique name="avoidDuplicateFieldWithSameXPath">
      <xs:annotation>
        <xs:documentation>If this happens, form fields will be displayed twice with same name and
          trigger issues when saving the record.
        </xs:documentation>
      </xs:annotation>
      <xs:selector xpath="field"/>
      <xs:field xpath="@xpath"/>
    </xs:unique>
  </xs:element>

  <xs:attribute name="or" type="xs:string">
    <xs:annotation>
      <xs:documentation>Local name to match if the element does not exist.</xs:documentation>
    </xs:annotation>
  </xs:attribute>

  <xs:attribute name="in" type="xs:string">
    <xs:annotation>
      <xs:documentation>XPath of the geonet:child element with the or name to look for. Usually
        points to the parent of last element of the XPath attribute.
      </xs:documentation>
    </xs:annotation>
  </xs:attribute>


  <xs:element name="fieldset">
    <xs:annotation>
      <xs:documentation>A fieldset</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="field"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="field">
    <xs:annotation>
      <xs:documentation><![CDATA[

Adding a field
--------------

To display a simple element use the ``xpath`` attribute to point to the element to display:

.. code-block:: xml

      <field xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:citation/*/gmd:title"/>


To override a field label use the ``name`` attribute and define that new label in ``{schema}/loc/{lang}/strings.xml``:

.. code-block:: xml

      <field name="myTitle"
             xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:citation/*/gmd:title"/>


To display a complex element which exist in the metadata document:

.. code-block:: xml

      <field name="pointOfContact"
             xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:pointOfContact"/>

In that case all children elements are also displayed.



To display a field if exist in the metadata document or providing a add button
in case it does not exist (specify ``in`` and ``or`` attribute):


.. code-block:: xml

      <field name="pointOfContact"
             xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:pointOfContact"
             or="pointOfContact"
             in="/gmd:MD_Metadata/gmd:identificationInfo/*"
             del="."/>


Activate the "flat" mode at the tab level to make the form display only existing elements:

.. code-block:: xml

    <view name="custom-view">
        <tab id="custom-tab" default="true" mode="flat">
          <section>
            <field
                    xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:citation/*/gmd:title"/>
            <field name="pointOfContact"
                   xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:pointOfContact"
                   or="pointOfContact"
                   in="/gmd:MD_Metadata/gmd:identificationInfo/*"
                   del="."/>
          </section>
        </tab>
      </view>


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="template" minOccurs="0" maxOccurs="1"/>
        <xs:element ref="directiveAttributes" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
      <xs:attribute name="if">
        <xs:annotation>
          <xs:documentation><![CDATA[
An optional xpath expression to evaluate to define if the element should be displayed
only in some situation (eg. only for service metadata records). eg.

.. code-block:: xml

          <field
            xpath="/gmd:MD_Metadata/gmd:identificationInfo/srv:SV_ServiceIdentification/
            gmd:resourceConstraints/gmd:MD_LegalConstraints/gmd:otherConstraints"
            if="count(gmd:MD_Metadata/gmd:identificationInfo/srv:SV_ServiceIdentification) > 0"/>

]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>A field name to override the default name.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="xpath" use="required">
        <xs:annotation>
          <xs:documentation>The xpath of the element to match.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="isMissingLabel" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
The label to display if the element does not exist in the metadata record. It indicates that
the element is missing in the current record. It could be use for a conformity section saying
that the element is "not evaluated". EXPERIMENTAL
            ]]>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="or">
        <xs:annotation>
          <xs:documentation>
            <![CDATA[
The local name of the geonet child (ie. non existing element) to match.

.. code-block:: xml

    <field xpath="/gmd:MD_Metadata/gmd:language"
           or="language"
           in="/gmd:MD_Metadata"/>

]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="in">
        <xs:annotation>
          <xs:documentation>The element to search in for the geonet child.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="del" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            <![CDATA[
Relative XPath of the element to remove when the remove button is clicked.

eg. If a template field match linkage and allows editing of field URL,
the remove control should remove the parent element gmd:onLine.

.. code-block:: xml

    <field name="url"
      xpath="/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions
                /gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage"
      del="../..">
      <template>



Del attribute can be used in template mode or not. Example to remove
spatialResolution while only editing denominator or distance. Denominator or distance
are mandatory but as the del element point to the spatialResolution
ancestor, there is no mandatory flag displayed and the remove control
remove the spatialResolution element.


.. code-block:: xml


    <field xpath="/gmd:MD_Metadata/gmd:identificationInfo/
                    */gmd:spatialResolution/*/gmd:distance"
           del="../.."/>
    <field xpath="/gmd:MD_Metadata/gmd:identificationInfo/
                    */gmd:spatialResolution/
                      */gmd:equivalentScale/*/gmd:denominator"
           del="../../../.."/>

            ]]>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="templateModeOnly" fixed="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[
Define if the template mode should be the only mode used. In that case, the field is always
displayed based on the XML template snippet field configuration. Default is false.
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="notDisplayedIfMissing" fixed="true" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>If the field is found and a geonet child also, the geonet child to add a
            new one is not displayed.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="use"/>
    </xs:complexType>
  </xs:element>


  <xs:element name="template">
    <xs:annotation>
      <xs:documentation><![CDATA[

Adding a template based field
-----------------------------

A templace configuration for an XML snippet to edit.

A template field is compose of an XML snippet corresponding to the element to edit where values to be edited are identified using {{fields}} notation. Each fields needs to be defined as values from which one input field will be created.

This mode is used to hide the complexity of the XML element to edit. eg.

.. code-block:: xml

     <field name="url"
            templateModeOnly="true"
            xpath="/gmd:MD_Metadata/gmd:distributionInfo/g.../gmd:linkage">
        <template>
          <values>
            <key label="url"
                 xpath="gmd:URL"
                 tooltip="gmd:linkage"/>
          </values>
          <snippet>t
            <gmd:linkage>
              <gmd:URL>{{url}}</gmd:URL>
            </gmd:linkage>
          </snippet>
        </template>


The template field mode will only provide editing of part of the snippet element. In some case the snippet may contains more elements than the one edited. In such case, the snippet MUST identified the list of potential elements in order to not to loose information when using this mode. Use the gn:copy element to properly combined the template with the current document.

eg. The gmd:MD_Identifier may contain a gmd:authority node which needs to be preserved.

.. code-block:: xml

    <snippet>
      <gmd:identifier>
        <gmd:MD_Identifier>
          <gn:copy select="gmd:authority"/>
          <gmd:code>
            <gco:CharacterString>{{code}}</gco:CharacterString>
          </gmd:code>
        </gmd:MD_Identifier>
      </gmd:identifier>
    </snippet>

Warning: Template based field does not support multilingual editing for ISO standards (ie. only the main language is edited - therefore, multilingual elements will be preserved).


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="1" ref="values">
          <xs:annotation>
            <xs:documentation>The list of values to match from the template.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="snippet"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>


  <xs:element name="text">
    <xs:annotation>
      <xs:documentation><![CDATA[
Adding documentation or help
----------------------------

Insert an HTML fragment in the editor.


.. code-block:: xml

          <field name="edmerpName"
                 xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/
                          gmd:pointOfContact[*/gmd:role/*/@codeListValue='edmerp']"
                 del=".">

          <text ref="edmerp-help"/>


The fragment is defined in localization file strings.xml:

.. code-block:: xml

       <edmerp-help>
         <div class="row">
           <div class="col-xs-offset-2 col-xs-8">
             <p class="help-block">The European Directory for Marine Environment
                 Research Project (EDMERP) contains descriptions of many projects.
                 This catalogue is maintained ...</p>
             </div>
         </div>
       </edmerp-help>


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="ref" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The tag name of the element to insert in the localization file.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="if" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            <![CDATA[
An XPath expression to evaluate. If true, the text is displayed.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>





  <xs:element name="action">
    <xs:annotation>
      <xs:documentation><![CDATA[
Adding a button
---------------

A button which trigger an action (usually a process or a add button).

Example of a button adding an extent:

.. code-block:: xml

        <action type="add"
                name="extent"
                or="extent"
                in="/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification">
            <template>
              <snippet>
                <gmd:extent>
                  <gmd:EX_Extent>
                    <gmd:geographicElement>
                      <gmd:EX_GeographicBoundingBox>
                        <gmd:westBoundLongitude>
                          <gco:Decimal/>
                        </gmd:westBoundLongitude>
                        <gmd:eastBoundLongitude>
                          <gco:Decimal/>
                        </gmd:eastBoundLongitude>
                        <gmd:southBoundLatitude>
                          <gco:Decimal/>
                        </gmd:southBoundLatitude>
                        <gmd:northBoundLatitude>
                          <gco:Decimal/>
                        </gmd:northBoundLatitude>
                      </gmd:EX_GeographicBoundingBox>
                    </gmd:geographicElement>
                  </gmd:EX_Extent>
                </gmd:extent>
              </snippet>
            </template>
          </action>


Example of a button displayed only if there is no resource identifier ending with
the metadata record identifier (ie. ``if`` attribute) and running the process
with ``add-resource-id`` identifier:

.. code-block:: xml

          <action type="process"
                  process="add-resource-id"
                  if="count(gmd:MD_Metadata/gmd:identificationInfo/*/
                                gmd:citation/*/gmd:identifier[
                                  ends-with(gmd:MD_Identifier/gmd:code/gco:CharacterString,
                                            //gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString)]) = 0"/>


Example of a button based on custom directive with some directive attributes set by
XPath:

.. code-block:: xml

          <action type="add"
                  btnLabel="checkpoint-tdp-add-component"
                  name="dataQualityInfo" or="dataQualityInfo"
                  in="/mdb:MD_Metadata"
                  addDirective="data-gn-record-fragment-selector">
            <directiveAttributes data-source-records="xpath::string-join(
              //mri:associatedResource/*[mri:initiativeType/*/@codeListValue = 'specification']
                /mri:metadataReference/@uuidref, ',')"/>
          </action>


Example of a drowdown button with 3 coordinates system to choose from:

.. code-block:: xml

         <!-- Display CRS description only,
                 customize label
                 and drop the refSysInfo element if removed -->
          <field xpath="/mdb:MD_Metadata/mdb:referenceSystemInfo/*/
                           mrs:referenceSystemIdentifier/*/mcc:description"
                 name="referenceSystemInfo"
                 del="../../../.."/>

          <!-- Add one of the 3 CRS proposed using the dropdown -->
          <action type="add"
                  btnLabel="addCrs"
                  name="referenceSystemInfo" or="referenceSystemInfo"
                  in="/mdb:MD_Metadata">
            <template>
              <snippet label="addCrs4326">
                <mdb:referenceSystemInfo>
                  <mrs:MD_ReferenceSystem>
                    <mrs:referenceSystemIdentifier>
                      <mcc:MD_Identifier>
                        <mcc:code>
                          <gco:CharacterString>http://www.opengis.net/def/crs/EPSG/0/4326</gco:CharacterString>
                        </mcc:code>
                        <mcc:description>
                          <gco:CharacterString>WGS 84 (EPSG:4326)</gco:CharacterString>
                        </mcc:description>
                      </mcc:MD_Identifier>
                    </mrs:referenceSystemIdentifier>
                  </mrs:MD_ReferenceSystem>
                </mdb:referenceSystemInfo>
              </snippet>
              <snippet label="addCrs4258">
                <mdb:referenceSystemInfo>
                  <mrs:MD_ReferenceSystem>
                    <mrs:referenceSystemIdentifier>
                      <mcc:MD_Identifier>
                        <mcc:code>
                          <gco:CharacterString>http://www.opengis.net/def/crs/EPSG/0/4258</gco:CharacterString>
                        </mcc:code>
                        <mcc:description>
                          <gco:CharacterString>ETRS89 (EPSG:4258)</gco:CharacterString>
                        </mcc:description>
                      </mcc:MD_Identifier>
                    </mrs:referenceSystemIdentifier>
                  </mrs:MD_ReferenceSystem>
                </mdb:referenceSystemInfo>
              </snippet>
              <snippet label="addCrs3035">
                <mdb:referenceSystemInfo>
                  <mrs:MD_ReferenceSystem>
                    <mrs:referenceSystemIdentifier>
                      <mcc:MD_Identifier>
                        <mcc:code>
                          <gco:CharacterString>http://www.opengis.net/def/crs/EPSG/0/3035</gco:CharacterString>
                        </mcc:code>
                        <mcc:description>
                          <gco:CharacterString>ETRS89 / LAEA Europe (EPSG:3035)</gco:CharacterString>
                        </mcc:description>
                      </mcc:MD_Identifier>
                    </mrs:referenceSystemIdentifier>
                  </mrs:MD_ReferenceSystem>
                </mdb:referenceSystemInfo>
              </snippet>
            </template>
          </action>


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="template" minOccurs="0" maxOccurs="1"/>
        <xs:element ref="directiveAttributes" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation><![CDATA[
When type is add, add optional directive attributes.

.. code-block:: xml

          <action type="add"
                  name="checkpoint-tdp-add-component"
                  or="dataQualityInfo"
                  in="/mdb:MD_Metadata"
                  if="count(//mri:associatedResource/*/mri:initiativeType/*[@codeListValue = 'specification']) > 0"
                  addDirective="data-gn-record-fragment-selector">
            <directiveAttributes data-source-records="xpath::string-join(
              //mri:associatedResource/*[mri:initiativeType/*/@codeListValue = 'specification']
                /mri:metadataReference/@uuidref, ',')"/>
          </action>

When type is associatedResource, optional options can be added
to open the panel with additional parameters.

For example, for sibling panel, the association type and initiative type could be set:

.. code-block:: xml

        <action type="associatedResource"
                name="checkpoint-linkToUpstreamData"
                if="count(//mri:associatedResource/*/mri:initiativeType/*[@codeListValue = 'specification']) = 1"
                process="sibling">
          <options>{"associationType": "crossReference", "initiativeType": "upstreamData"}</options>
        </action>


]]>
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>TODO</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type">
        <xs:annotation>
          <xs:documentation>The type of control</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="add"/>
            <xs:enumeration value="process"/>
            <xs:enumeration value="associatedResource"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="process" type="xs:string">
        <xs:annotation>
          <xs:documentation>The process identifier (eg. add-resource-id) or the associated resource
            type to open
            (eg. onlinesrc, fcats, parent, source, sibling, service, dataset, thumbnail) See
            onlinesrc directive.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="forceLabel" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[
Force the label to be displayed for this action
even if the action is not the first element of its
kind. Label with always be displayed.
]]>
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="or"/>
      <xs:attribute ref="in"/>
      <xs:attribute ref="addDirective"/>
      <xs:attribute name="if" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            <![CDATA[
An XPath expression to evaluate. If true, the control is displayed. eg.


.. code-block:: xml

    count(gmd:MD_Metadata/gmd:identificationInfo/*/gmd:citation/gmd:CI_Citation/
    gmd:identifier[ends-with(gmd:MD_Identifier/gmd:code/gco:CharacterString,
    //gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString)]) = 0


will only displayed the action control if the resource identifier does not end
with the metadata identifier.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="class" type="xs:string">
        <xs:annotation>
          <xs:documentation>Optional CSS class to add to the parent div element. eg. gn-required to show a *.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="btnLabel" type="xs:string">
        <xs:annotation>
          <xs:documentation>Optional label to be addded to the button.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="btnClass" type="xs:string">
        <xs:annotation>
          <xs:documentation>Optional CSS class to be added to the button.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:attribute name="displayIfRecord">
    <xs:annotation>
      <xs:documentation><![CDATA[
XPath expression returning boolean value which will be evaluated against the metadata record. if true the view will be displayed.
eg. Display custom-view if metadata standard name contains Medsea:

.. code-block:: xml

    <view name="custom-view"
          displayIfRecord="contains(gmd:MD_Metadata/
                                      gmd:metadataStandardName/gco:CharacterString,
                                    'MedSea')"

]]></xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="displayIfServiceInfo">
    <xs:annotation>
      <xs:documentation><![CDATA[
XPath expression returning boolean value which will be evaluate against the service
information tree (Jeeves /root/gui element). if true the view will be displayed.

eg. Display custom view if user is Administrator:

.. code-block:: xml

    <view name="custom-view"
          displayIfServiceInfo="count(session[profile = 'Administrator']) = 1"

displayIfRecord and displayIfServiceInfo could be combined. An AND operator is used. Both condition MUST returned true for the view to be displayed.

]]></xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="use">
    <xs:annotation>
      <xs:documentation><![CDATA[
The form field type to use (one of the HTML5 type) or an AngularJS directive to use.
This list is defined as an open enumeration. For directive, the value will be set in a simple
text input by default. If the directive needs to deal with cariage return character, the
directive name MUST contains "-textarea" in order to set the value in a textarea
instead of the text input.
        ]]> </xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="xs:string">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="textarea"/>
            <xs:enumeration value="number"/>
            <xs:enumeration value="data-gn-date-picker">
              <xs:annotation>
                <xs:documentation>
                  Custom date picker directive which rely on
                  HTML5 month, date and time type if the browser supports it.
                  If not, will provide a custom calendar picker.
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="date">
              <xs:annotation>
                <xs:documentation>
                  Use only if target browser support HTML5 date type
                  (http://caniuse.com/input-datetime).
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="datetime">
              <xs:annotation>
                <xs:documentation>
                  Use only if target browser support HTML5 date type
                  (http://caniuse.com/input-datetime).
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="email"/>
            <xs:enumeration value="data-gn-country-picker">
              <xs:annotation>
                <xs:documentation>An autocompletion list for country (based on the region
                  API).
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-topiccategory-selector-div">
              <xs:annotation>
                <xs:documentation>A directive to render topic category like keywords widget.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-field-duration-div">
              <xs:annotation>
                <xs:documentation>A directive to set a complete duration type informations.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-logo-selector">
              <xs:annotation>
                <xs:documentation>A directive to select a logo URL.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-language-picker">
              <xs:annotation>
                <xs:documentation>An autocompletion list for languages.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-keyword-picker">
              <xs:annotation>
                <xs:documentation><![CDATA[
An autocompletion list based on a thesaurus.

.. code-block:: xml

                  <for name="gmd:otherConstraints"
                       use="data-gn-keyword-picker">
                    <directiveAttributes
                      data-thesaurus-key="external.theme.httpinspireeceuropaeumetadatacodelistOnLineDescriptionCode-OnLineDescriptionCode"
                      data-display-definition="true"/>
                  </for>


                ]]></xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:union>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="addDirective">
    <xs:annotation>
      <xs:documentation>The directive to use for the add control for this field.</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="data-gn-crs-selector">
              <xs:annotation>
                <xs:documentation><![CDATA[
                  A classic add control with an autocompletion list for projection system based on the EPSG database.
                  ]]></xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-directory-entry-selector">
              <xs:annotation>
                <xs:documentation><![CDATA[
                  A classic add control with a popup to choose from contact directory and an autocompletion list to search in the contact directory and add a contact.
                  ]]></xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="data-gn-thesaurus-selector">
              <xs:annotation>
                <xs:documentation><![CDATA[
                  A classic add control with a dropdown menu to choose a thesaurus to add keyword from.]]></xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:union>
    </xs:simpleType>
  </xs:attribute>

  <xs:element name="values">
    <xs:annotation>
      <xs:documentation><![CDATA[
A list of replacement values to be apply to the snippet.

.. code-block:: xml

      <values>
        <key label="format"
             xpath="gmd:MD_Format/gmd:name/gco:CharacterString"/>
        <key label="format_version"
             xpath="gmd:MD_Format/gmd:version/gco:CharacterString"/>

        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="1" maxOccurs="unbounded" ref="key"/>
      </xs:sequence>
      <xs:attribute name="readonlyIf">
        <xs:annotation>
          <xs:documentation><![CDATA[
XPath returning a boolean expression which if true
disable all template fields.

Example: Disable pointOfContactName field if gmd:contact
contains an XLink.


.. code-block:: xml

    <template>
      <values readonlyIf="count(@xlink:href) > 0">
        <key label="pointOfContactName"
          xpath="gmd:CI_ResponsibleParty/gmd:organisationName/gco:CharacterString"/>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name="key">
    <xs:complexType>
      <xs:choice>
        <xs:element minOccurs="0" maxOccurs="1" name="codelist">
          <xs:annotation>
            <xs:documentation>Define a codelist to use.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="name" type="xs:string">
              <xs:annotation>
                <xs:documentation>An existing codelist from codelist.xml for the schema.
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="1" name="helper">
          <xs:annotation>
            <xs:documentation>Define a helper to use.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="name" type="xs:string">
              <xs:annotation>
                <xs:documentation>An existing element name from labels.xml for the schema having an
                  helper defined.
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="context" type="xs:string">
              <xs:annotation>
                <xs:documentation>An optional context if the target element have many values.
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element ref="directiveAttributes" minOccurs="0" maxOccurs="1"/>
      </xs:choice>
      <xs:attribute name="label" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>Field label.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="xpath" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>XPath to get the value from the XML snippet.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="required" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation>Indicate if the field is required.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="tooltip" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation><![CDATA[
Tooltip definition to be identified in labels.xml. Definition
structure is the same as in the editor.

.. code-block:: xml

      <key label="code"
           xpath="gmd:MD_Identifier/gmd:code/gco:CharacterString"
           tooltip="gmd:code|gmd:MD_Identifier"/>
            ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="use"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="directiveAttributes">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Use directiveAttributes element to specify custom directive
attributes. For the time being only gn-date-picker directive
supports it.

Example: data-tag-name attribute allows to define non
standard attribute name (ie. not gco:Date and gco:DateTime).


.. code-block:: xml

        <key label="endPosition"
            xpath="gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/*/gml:endPosition"
            use="gn-date-picker"
          >
            <directiveAttributes data-tag-name=""/>
          </key>

              ]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:anyAttribute processContents="skip"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="snippet">
    <xs:annotation>
      <xs:documentation><![CDATA[
An XML snippet with replacement for each key defined in that field.


.. code-block:: xml

    <gmd:distributionFormat>
      <gmd:MD_Format>
        <gmd:name>
          <gco:CharacterString>{{format}}</gco:CharacterString>
        </gmd:name>
        <gmd:version>
          <gco:CharacterString>{{format_version}}</gco:CharacterString>
        </gmd:version>
      </gmd:MD_Format>
    </gmd:distributionFormat>


        ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:any processContents="skip" namespace="##any"/>
      </xs:sequence>
      <xs:attribute name="label" type="xs:string" use="optional">
        <xs:annotation>
          <xs:documentation>Snippet label.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="batchEditing">
    <xs:annotation>
      <xs:documentation><![CDATA[
Batch editing configuration element.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="section" minOccurs="1" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation><![CDATA[
A group of field
]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="field" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation><![CDATA[
A field on which user can do batch editing.
]]>
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="template" type="xs:string" minOccurs="0" maxOccurs="1">
                      <xs:annotation>
                        <xs:documentation>
                          <![CDATA[
Define an XML template to use for the value to insert.
                        ]]>
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
Field identifier.
Translations are set on client side.
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="xpath" type="xs:string" use="required">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
XPath of the element to edit.
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="indexField" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
Lucene index field name (as defined in dumpfields).
The field will be used to preview current record values (TODO).
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="use" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
Field type. Register here any Angular directive to be used
on the client side. Default is simple text field.
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="removable" type="xs:boolean" fixed="true">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
Define if the field could be marked as deleted.
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="insertMode">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
Define if the field should be insert or replace.
Do not set this property for mandatory field (eg. title).
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="gn_add"/>
                        <xs:enumeration value="gn_create"/>
                        <xs:enumeration value="gn_replace"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="codelist" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>
                        <![CDATA[
The codelist identifier. eg. gmd:MD_TopicCategoryCode for topic category.
                        ]]>
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required">
              <xs:annotation>
                <xs:documentation>
                  <![CDATA[
Section identifier.
Translations are set on client side.
                    ]]>
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>



  <xs:element name="xsl">
    <xs:annotation>
      <xs:documentation>
        <![CDATA[
Trigger an XSL rendering mode. In some circumstances, you may want
to customize a lot the editor. In such case, delegate to XSL template.


For example, create a tab on the data quality section:

.. code-block:: xml

      <tab id="qualityMeasures">
        <section>
          <xsl xpath="/mdb:MD_Metadata/mdb:dataQualityInfo"
               mode="iso19115-3-qm"
               or="report"/>
         </section>
      </tab>


Then declare a template (eg. in iso19115-3/layout/layout-custom-tpl.xsl) to customize
the layout:

.. code-block:: xml

      <xsl:template name="iso19115-3-qm">
        <h1><xsl:value-of select="$strings/qualityMeasures"/></h1>


For example, create a table of contact:

.. code-block:: xml

      <xsl xpath="/gmd:MD_Metadata/gmd:identificationInfo/*/gmd:pointOfContact"
           mode="iso19139-table-contact"/>

]]>
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="xpath" use="required" type="xs:string"/>
      <xs:attribute name="mode" use="required" type="xs:string"/>
      <xs:attribute name="or" use="optional" type="xs:string"/>
    </xs:complexType>
  </xs:element>


  <xs:element name="directive">
    <xs:annotation>
      <xs:documentation><![CDATA[

Include any custom directive with required attributes.

      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:anyAttribute/>
    </xs:complexType>
  </xs:element>
</xs:schema>
